
Home_Garden.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  00000a40  00000ad4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b0  00800218  00800218  00000aec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008e61  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ef2  00000000  00000000  00009c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bf0  00000000  00000000  0000bb77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000878  00000000  00000000  0000d768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020d4  00000000  00000000  0000dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000334f  00000000  00000000  000100b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  00013403  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	d3 c0       	rjmp	.+422    	; 0x1a8 <__ctors_end>
   2:	00 00       	nop
   4:	ff c0       	rjmp	.+510    	; 0x204 <__bad_interrupt>
   6:	00 00       	nop
   8:	fd c0       	rjmp	.+506    	; 0x204 <__bad_interrupt>
   a:	00 00       	nop
   c:	fb c0       	rjmp	.+502    	; 0x204 <__bad_interrupt>
   e:	00 00       	nop
  10:	f9 c0       	rjmp	.+498    	; 0x204 <__bad_interrupt>
  12:	00 00       	nop
  14:	f7 c0       	rjmp	.+494    	; 0x204 <__bad_interrupt>
  16:	00 00       	nop
  18:	f5 c0       	rjmp	.+490    	; 0x204 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f3 c0       	rjmp	.+486    	; 0x204 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f1 c0       	rjmp	.+482    	; 0x204 <__bad_interrupt>
  22:	00 00       	nop
  24:	ef c0       	rjmp	.+478    	; 0x204 <__bad_interrupt>
  26:	00 00       	nop
  28:	ed c0       	rjmp	.+474    	; 0x204 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	eb c0       	rjmp	.+470    	; 0x204 <__bad_interrupt>
  2e:	00 00       	nop
  30:	e9 c0       	rjmp	.+466    	; 0x204 <__bad_interrupt>
  32:	00 00       	nop
  34:	e7 c0       	rjmp	.+462    	; 0x204 <__bad_interrupt>
  36:	00 00       	nop
  38:	e5 c0       	rjmp	.+458    	; 0x204 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e3 c0       	rjmp	.+454    	; 0x204 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e1 c0       	rjmp	.+450    	; 0x204 <__bad_interrupt>
  42:	00 00       	nop
  44:	df c0       	rjmp	.+446    	; 0x204 <__bad_interrupt>
  46:	00 00       	nop
  48:	dd c0       	rjmp	.+442    	; 0x204 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	db c0       	rjmp	.+438    	; 0x204 <__bad_interrupt>
  4e:	00 00       	nop
  50:	30 c1       	rjmp	.+608    	; 0x2b2 <__vector_20>
  52:	00 00       	nop
  54:	d7 c0       	rjmp	.+430    	; 0x204 <__bad_interrupt>
  56:	00 00       	nop
  58:	d5 c0       	rjmp	.+426    	; 0x204 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	c4 c3       	rjmp	.+1928   	; 0x7e6 <__vector_23>
  5e:	00 00       	nop
  60:	d1 c0       	rjmp	.+418    	; 0x204 <__bad_interrupt>
  62:	00 00       	nop
  64:	f5 c2       	rjmp	.+1514   	; 0x650 <__vector_25>
  66:	00 00       	nop
  68:	29 c3       	rjmp	.+1618   	; 0x6bc <__vector_26>
  6a:	00 00       	nop
  6c:	cb c0       	rjmp	.+406    	; 0x204 <__bad_interrupt>
  6e:	00 00       	nop
  70:	c9 c0       	rjmp	.+402    	; 0x204 <__bad_interrupt>
  72:	00 00       	nop
  74:	c7 c0       	rjmp	.+398    	; 0x204 <__bad_interrupt>
  76:	00 00       	nop
  78:	c5 c0       	rjmp	.+394    	; 0x204 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	c3 c0       	rjmp	.+390    	; 0x204 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c1 c0       	rjmp	.+386    	; 0x204 <__bad_interrupt>
  82:	00 00       	nop
  84:	bf c0       	rjmp	.+382    	; 0x204 <__bad_interrupt>
  86:	00 00       	nop
  88:	bd c0       	rjmp	.+378    	; 0x204 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	bb c0       	rjmp	.+374    	; 0x204 <__bad_interrupt>
  8e:	00 00       	nop
  90:	b9 c0       	rjmp	.+370    	; 0x204 <__bad_interrupt>
  92:	00 00       	nop
  94:	b7 c0       	rjmp	.+366    	; 0x204 <__bad_interrupt>
  96:	00 00       	nop
  98:	b5 c0       	rjmp	.+362    	; 0x204 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b3 c0       	rjmp	.+358    	; 0x204 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b1 c0       	rjmp	.+354    	; 0x204 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	af c0       	rjmp	.+350    	; 0x204 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	ad c0       	rjmp	.+346    	; 0x204 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ab c0       	rjmp	.+342    	; 0x204 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	a9 c0       	rjmp	.+338    	; 0x204 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	a7 c0       	rjmp	.+334    	; 0x204 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	a5 c0       	rjmp	.+330    	; 0x204 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	a3 c0       	rjmp	.+326    	; 0x204 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a1 c0       	rjmp	.+322    	; 0x204 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	9f c0       	rjmp	.+318    	; 0x204 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	9d c0       	rjmp	.+314    	; 0x204 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	9b c0       	rjmp	.+310    	; 0x204 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	99 c0       	rjmp	.+306    	; 0x204 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	97 c0       	rjmp	.+302    	; 0x204 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	95 c0       	rjmp	.+298    	; 0x204 <__bad_interrupt>
  da:	00 00       	nop
  dc:	93 c0       	rjmp	.+294    	; 0x204 <__bad_interrupt>
  de:	00 00       	nop
  e0:	91 c0       	rjmp	.+290    	; 0x204 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
  e4:	01 02       	muls	r16, r17
  e6:	10 20       	and	r1, r0
  e8:	20 08       	sbc	r2, r0
  ea:	08 10       	cpse	r0, r8
  ec:	20 40       	sbci	r18, 0x00	; 0
  ee:	10 20       	and	r1, r0
  f0:	40 80       	ld	r4, Z
  f2:	02 01       	movw	r0, r4
  f4:	02 01       	movw	r0, r4
  f6:	08 04       	cpc	r0, r8
  f8:	02 01       	movw	r0, r4
  fa:	01 02       	muls	r16, r17
  fc:	04 08       	sbc	r0, r4
  fe:	10 20       	and	r1, r0
 100:	40 80       	ld	r4, Z
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	20 10       	cpse	r2, r0
 106:	08 04       	cpc	r0, r8
 108:	02 01       	movw	r0, r4
 10a:	80 04       	cpc	r8, r0
 10c:	02 01       	movw	r0, r4
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	20 10       	cpse	r2, r0
 112:	08 04       	cpc	r0, r8
 114:	02 01       	movw	r0, r4
 116:	08 04       	cpc	r0, r8
 118:	02 01       	movw	r0, r4
 11a:	01 02       	muls	r16, r17
 11c:	04 08       	sbc	r0, r4
 11e:	10 20       	and	r1, r0
 120:	40 80       	ld	r4, Z
 122:	01 02       	muls	r16, r17
 124:	04 08       	sbc	r0, r4
 126:	10 20       	and	r1, r0
 128:	40 80       	ld	r4, Z

0000012a <digital_pin_to_port_PGM>:
 12a:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 13a:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 14a:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 15a:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 16a:	0b 0b 0b 0b 0b 0b                                   ......

00000170 <port_to_output_PGM>:
 170:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 180:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000018a <port_to_mode_PGM>:
 18a:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 19a:	01 01 00 00 04 01 07 01 0a 01                       ..........

000001a4 <__ctors_start>:
 1a4:	98 01       	movw	r18, r16
 1a6:	90 03       	fmuls	r17, r16

000001a8 <__ctors_end>:
 1a8:	11 24       	eor	r1, r1
 1aa:	1f be       	out	0x3f, r1	; 63
 1ac:	cf ef       	ldi	r28, 0xFF	; 255
 1ae:	d1 e2       	ldi	r29, 0x21	; 33
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	00 e0       	ldi	r16, 0x00	; 0
 1b6:	0c bf       	out	0x3c, r16	; 60

000001b8 <__do_copy_data>:
 1b8:	12 e0       	ldi	r17, 0x02	; 2
 1ba:	a0 e0       	ldi	r26, 0x00	; 0
 1bc:	b2 e0       	ldi	r27, 0x02	; 2
 1be:	e0 e4       	ldi	r30, 0x40	; 64
 1c0:	fa e0       	ldi	r31, 0x0A	; 10
 1c2:	00 e0       	ldi	r16, 0x00	; 0
 1c4:	0b bf       	out	0x3b, r16	; 59
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <__do_copy_data+0x14>
 1c8:	07 90       	elpm	r0, Z+
 1ca:	0d 92       	st	X+, r0
 1cc:	a8 31       	cpi	r26, 0x18	; 24
 1ce:	b1 07       	cpc	r27, r17
 1d0:	d9 f7       	brne	.-10     	; 0x1c8 <__do_copy_data+0x10>

000001d2 <__do_clear_bss>:
 1d2:	22 e0       	ldi	r18, 0x02	; 2
 1d4:	a8 e1       	ldi	r26, 0x18	; 24
 1d6:	b2 e0       	ldi	r27, 0x02	; 2
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <.do_clear_bss_start>

000001da <.do_clear_bss_loop>:
 1da:	1d 92       	st	X+, r1

000001dc <.do_clear_bss_start>:
 1dc:	a8 3c       	cpi	r26, 0xC8	; 200
 1de:	b2 07       	cpc	r27, r18
 1e0:	e1 f7       	brne	.-8      	; 0x1da <.do_clear_bss_loop>

000001e2 <__do_global_ctors>:
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	c4 ed       	ldi	r28, 0xD4	; 212
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	00 e0       	ldi	r16, 0x00	; 0
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <__do_global_ctors+0x14>
 1ec:	21 97       	sbiw	r28, 0x01	; 1
 1ee:	01 09       	sbc	r16, r1
 1f0:	80 2f       	mov	r24, r16
 1f2:	fe 01       	movw	r30, r28
 1f4:	02 d4       	rcall	.+2052   	; 0x9fa <__tablejump2__>
 1f6:	c2 3d       	cpi	r28, 0xD2	; 210
 1f8:	d1 07       	cpc	r29, r17
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 07       	cpc	r16, r24
 1fe:	b1 f7       	brne	.-20     	; 0x1ec <__do_global_ctors+0xa>
 200:	bd d2       	rcall	.+1402   	; 0x77c <main>
 202:	1c c4       	rjmp	.+2104   	; 0xa3c <_exit>

00000204 <__bad_interrupt>:
 204:	fd ce       	rjmp	.-518    	; 0x0 <__vectors>

00000206 <setup>:
			hours = tid / 60 / 60;
			minutes = (tid - hours * 60 * 60) / 60;
			seconds = tid - minutes * 60 - hours * 60 * 60;
			return(seconds);
	}
  }
 206:	26 e0       	ldi	r18, 0x06	; 6
 208:	40 e8       	ldi	r20, 0x80	; 128
 20a:	55 e2       	ldi	r21, 0x25	; 37
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	82 e2       	ldi	r24, 0x22	; 34
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	ba d1       	rcall	.+884    	; 0x58a <_ZN14HardwareSerial5beginEmh>
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	86 e1       	ldi	r24, 0x16	; 22
 21a:	91 d3       	rcall	.+1826   	; 0x93e <pinMode>
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	87 e1       	ldi	r24, 0x17	; 23
 220:	8e d3       	rcall	.+1820   	; 0x93e <pinMode>
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	88 e1       	ldi	r24, 0x18	; 24
 226:	8b d3       	rcall	.+1814   	; 0x93e <pinMode>
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	89 e1       	ldi	r24, 0x19	; 25
 22c:	88 d3       	rcall	.+1808   	; 0x93e <pinMode>
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	8a e1       	ldi	r24, 0x1A	; 26
 232:	85 d3       	rcall	.+1802   	; 0x93e <pinMode>
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	8b e1       	ldi	r24, 0x1B	; 27
 238:	82 d3       	rcall	.+1796   	; 0x93e <pinMode>
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	8c e1       	ldi	r24, 0x1C	; 28
 23e:	7f d3       	rcall	.+1790   	; 0x93e <pinMode>
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	8d e1       	ldi	r24, 0x1D	; 29
 244:	7c d3       	rcall	.+1784   	; 0x93e <pinMode>
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	8e e1       	ldi	r24, 0x1E	; 30
 24a:	79 d3       	rcall	.+1778   	; 0x93e <pinMode>
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	8f e1       	ldi	r24, 0x1F	; 31
 250:	76 d3       	rcall	.+1772   	; 0x93e <pinMode>
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	84 e2       	ldi	r24, 0x24	; 36
 256:	73 d3       	rcall	.+1766   	; 0x93e <pinMode>
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	86 e2       	ldi	r24, 0x26	; 38
 25c:	70 d3       	rcall	.+1760   	; 0x93e <pinMode>
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	87 e2       	ldi	r24, 0x27	; 39
 262:	6d d3       	rcall	.+1754   	; 0x93e <pinMode>
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	88 e2       	ldi	r24, 0x28	; 40
 268:	6a d3       	rcall	.+1748   	; 0x93e <pinMode>
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	84 e0       	ldi	r24, 0x04	; 4
 26e:	67 d3       	rcall	.+1742   	; 0x93e <pinMode>
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	64 d3       	rcall	.+1736   	; 0x93e <pinMode>
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	61 d3       	rcall	.+1730   	; 0x93e <pinMode>
 27c:	f8 94       	cli
 27e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 282:	e1 e8       	ldi	r30, 0x81	; 129
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	10 82       	st	Z, r1
 288:	8e ee       	ldi	r24, 0xEE	; 238
 28a:	95 e8       	ldi	r25, 0x85	; 133
 28c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <timer1_counter+0x1>
 290:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <timer1_counter>
 294:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 298:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 29c:	80 81       	ld	r24, Z
 29e:	84 60       	ori	r24, 0x04	; 4
 2a0:	80 83       	st	Z, r24
 2a2:	ef e6       	ldi	r30, 0x6F	; 111
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	80 83       	st	Z, r24
 2ac:	78 94       	sei
 2ae:	08 95       	ret

000002b0 <loop>:
 2b0:	08 95       	ret

000002b2 <__vector_20>:


//Til uret
ISR(TIMER1_OVF_vect)        // interrupt service routine
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	2f 93       	push	r18
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
	TCNT1 = timer1_counter;   // preload timer
 2c6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <timer1_counter>
 2ca:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <timer1_counter+0x1>
 2ce:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 2d2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	
	if(tid == 86400)
 2d6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
 2da:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <__data_end+0x1>
 2de:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <__data_end+0x2>
 2e2:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <__data_end+0x3>
 2e6:	80 38       	cpi	r24, 0x80	; 128
 2e8:	21 e5       	ldi	r18, 0x51	; 81
 2ea:	92 07       	cpc	r25, r18
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	a2 07       	cpc	r26, r18
 2f0:	b1 05       	cpc	r27, r1
 2f2:	49 f4       	brne	.+18     	; 0x306 <__vector_20+0x54>
	{
		tid = 0;
 2f4:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <__data_end>
 2f8:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <__data_end+0x1>
 2fc:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end+0x2>
 300:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__data_end+0x3>
 304:	0b c0       	rjmp	.+22     	; 0x31c <__vector_20+0x6a>

	}
	else
	{
		tid = tid + 1;
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	a1 1d       	adc	r26, r1
 30a:	b1 1d       	adc	r27, r1
 30c:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
 310:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <__data_end+0x1>
 314:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <__data_end+0x2>
 318:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <__data_end+0x3>
	}
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <_GLOBAL__sub_I_timer1_counter>:
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
	//Men du kan bare skrive det normalt ind i hver boks timer, min og sek.
	unsigned long timer = 15 ;
	unsigned long minutter = 45 ;
	unsigned long sekunder = 00 ;
					//NIX PILLE!!!
					unsigned long tid = timer * 60 * 60 + minutter * 60 + sekunder;
 338:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <timer>
 33c:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <timer+0x1>
 340:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <timer+0x2>
 344:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <timer+0x3>
 348:	a0 e1       	ldi	r26, 0x10	; 16
 34a:	be e0       	ldi	r27, 0x0E	; 14
 34c:	5e d3       	rcall	.+1724   	; 0xa0a <__muluhisi3>
 34e:	6b 01       	movw	r12, r22
 350:	7c 01       	movw	r14, r24
 352:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 356:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 35a:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__data_start+0x2>
 35e:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__data_start+0x3>
 362:	ac e3       	ldi	r26, 0x3C	; 60
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	51 d3       	rcall	.+1698   	; 0xa0a <__muluhisi3>
 368:	ab 01       	movw	r20, r22
 36a:	bc 01       	movw	r22, r24
 36c:	4c 0d       	add	r20, r12
 36e:	5d 1d       	adc	r21, r13
 370:	6e 1d       	adc	r22, r14
 372:	7f 1d       	adc	r23, r15
 374:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <sekunder>
 378:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <sekunder+0x1>
 37c:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <sekunder+0x2>
 380:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <sekunder+0x3>
 384:	84 0f       	add	r24, r20
 386:	95 1f       	adc	r25, r21
 388:	a6 1f       	adc	r26, r22
 38a:	b7 1f       	adc	r27, r23
 38c:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
 390:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <__data_end+0x1>
 394:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <__data_end+0x2>
 398:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <__data_end+0x3>
	}
	else
	{
		tid = tid + 1;
	}
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	cf 90       	pop	r12
 3a4:	08 95       	ret

000003a6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 3a6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 3a8:	91 8d       	ldd	r25, Z+25	; 0x19
 3aa:	22 8d       	ldd	r18, Z+26	; 0x1a
 3ac:	89 2f       	mov	r24, r25
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	80 5c       	subi	r24, 0xC0	; 192
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	82 1b       	sub	r24, r18
 3b6:	91 09       	sbc	r25, r1
}
 3b8:	8f 73       	andi	r24, 0x3F	; 63
 3ba:	99 27       	eor	r25, r25
 3bc:	08 95       	ret

000003be <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 3be:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 3c0:	91 8d       	ldd	r25, Z+25	; 0x19
 3c2:	82 8d       	ldd	r24, Z+26	; 0x1a
 3c4:	98 17       	cp	r25, r24
 3c6:	31 f0       	breq	.+12     	; 0x3d4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 3c8:	82 8d       	ldd	r24, Z+26	; 0x1a
 3ca:	e8 0f       	add	r30, r24
 3cc:	f1 1d       	adc	r31, r1
 3ce:	85 8d       	ldd	r24, Z+29	; 0x1d
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 3d8:	08 95       	ret

000003da <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 3da:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 3dc:	91 8d       	ldd	r25, Z+25	; 0x19
 3de:	82 8d       	ldd	r24, Z+26	; 0x1a
 3e0:	98 17       	cp	r25, r24
 3e2:	61 f0       	breq	.+24     	; 0x3fc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 3e4:	82 8d       	ldd	r24, Z+26	; 0x1a
 3e6:	df 01       	movw	r26, r30
 3e8:	a8 0f       	add	r26, r24
 3ea:	b1 1d       	adc	r27, r1
 3ec:	5d 96       	adiw	r26, 0x1d	; 29
 3ee:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 3f0:	92 8d       	ldd	r25, Z+26	; 0x1a
 3f2:	9f 5f       	subi	r25, 0xFF	; 255
 3f4:	9f 73       	andi	r25, 0x3F	; 63
 3f6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 400:	08 95       	ret

00000402 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 402:	87 e8       	ldi	r24, 0x87	; 135
 404:	93 e0       	ldi	r25, 0x03	; 3
 406:	89 2b       	or	r24, r25
 408:	39 f0       	breq	.+14     	; 0x418 <_Z14serialEventRunv+0x16>
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	89 2b       	or	r24, r25
 410:	19 f0       	breq	.+6      	; 0x418 <_Z14serialEventRunv+0x16>
 412:	7d d1       	rcall	.+762    	; 0x70e <_Z17Serial0_availablev>
 414:	81 11       	cpse	r24, r1
 416:	25 c0       	rjmp	.+74     	; 0x462 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	89 2b       	or	r24, r25
 41e:	41 f0       	breq	.+16     	; 0x430 <_Z14serialEventRunv+0x2e>
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	89 2b       	or	r24, r25
 426:	21 f0       	breq	.+8      	; 0x430 <_Z14serialEventRunv+0x2e>
 428:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 42c:	81 11       	cpse	r24, r1
 42e:	1c c0       	rjmp	.+56     	; 0x468 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	89 2b       	or	r24, r25
 436:	41 f0       	breq	.+16     	; 0x448 <_Z14serialEventRunv+0x46>
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	89 2b       	or	r24, r25
 43e:	21 f0       	breq	.+8      	; 0x448 <_Z14serialEventRunv+0x46>
 440:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 444:	81 11       	cpse	r24, r1
 446:	13 c0       	rjmp	.+38     	; 0x46e <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	89 2b       	or	r24, r25
 44e:	a1 f0       	breq	.+40     	; 0x478 <_Z14serialEventRunv+0x76>
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	89 2b       	or	r24, r25
 456:	81 f0       	breq	.+32     	; 0x478 <_Z14serialEventRunv+0x76>
 458:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 45c:	81 11       	cpse	r24, r1
 45e:	0a c0       	rjmp	.+20     	; 0x474 <_Z14serialEventRunv+0x72>
 460:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 462:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 466:	d8 cf       	rjmp	.-80     	; 0x418 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 468:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 46c:	e1 cf       	rjmp	.-62     	; 0x430 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 46e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 472:	ea cf       	rjmp	.-44     	; 0x448 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 474:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 478:	08 95       	ret

0000047a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 47a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 47c:	84 8d       	ldd	r24, Z+28	; 0x1c
 47e:	df 01       	movw	r26, r30
 480:	a8 0f       	add	r26, r24
 482:	b1 1d       	adc	r27, r1
 484:	a3 5a       	subi	r26, 0xA3	; 163
 486:	bf 4f       	sbci	r27, 0xFF	; 255
 488:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 48a:	84 8d       	ldd	r24, Z+28	; 0x1c
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	8f 73       	andi	r24, 0x3F	; 63
 492:	99 27       	eor	r25, r25
 494:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 496:	a6 89       	ldd	r26, Z+22	; 0x16
 498:	b7 89       	ldd	r27, Z+23	; 0x17
 49a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 49c:	a0 89       	ldd	r26, Z+16	; 0x10
 49e:	b1 89       	ldd	r27, Z+17	; 0x11
 4a0:	8c 91       	ld	r24, X
 4a2:	80 64       	ori	r24, 0x40	; 64
 4a4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 4a6:	93 8d       	ldd	r25, Z+27	; 0x1b
 4a8:	84 8d       	ldd	r24, Z+28	; 0x1c
 4aa:	98 13       	cpse	r25, r24
 4ac:	06 c0       	rjmp	.+12     	; 0x4ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 4ae:	02 88       	ldd	r0, Z+18	; 0x12
 4b0:	f3 89       	ldd	r31, Z+19	; 0x13
 4b2:	e0 2d       	mov	r30, r0
 4b4:	80 81       	ld	r24, Z
 4b6:	8f 7d       	andi	r24, 0xDF	; 223
 4b8:	80 83       	st	Z, r24
 4ba:	08 95       	ret

000004bc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 4c2:	88 8d       	ldd	r24, Y+24	; 0x18
 4c4:	88 23       	and	r24, r24
 4c6:	c1 f0       	breq	.+48     	; 0x4f8 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4c8:	ea 89       	ldd	r30, Y+18	; 0x12
 4ca:	fb 89       	ldd	r31, Y+19	; 0x13
 4cc:	80 81       	ld	r24, Z
 4ce:	85 fd       	sbrc	r24, 5
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <_ZN14HardwareSerial5flushEv+0x20>
 4d2:	a8 89       	ldd	r26, Y+16	; 0x10
 4d4:	b9 89       	ldd	r27, Y+17	; 0x11
 4d6:	8c 91       	ld	r24, X
 4d8:	86 fd       	sbrc	r24, 6
 4da:	0e c0       	rjmp	.+28     	; 0x4f8 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	07 fc       	sbrc	r0, 7
 4e0:	f5 cf       	rjmp	.-22     	; 0x4cc <_ZN14HardwareSerial5flushEv+0x10>
 4e2:	80 81       	ld	r24, Z
 4e4:	85 ff       	sbrs	r24, 5
 4e6:	f2 cf       	rjmp	.-28     	; 0x4cc <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4e8:	a8 89       	ldd	r26, Y+16	; 0x10
 4ea:	b9 89       	ldd	r27, Y+17	; 0x11
 4ec:	8c 91       	ld	r24, X
 4ee:	85 ff       	sbrs	r24, 5
 4f0:	ed cf       	rjmp	.-38     	; 0x4cc <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4f2:	ce 01       	movw	r24, r28
 4f4:	c2 df       	rcall	.-124    	; 0x47a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4f6:	e8 cf       	rjmp	.-48     	; 0x4c8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	ec 01       	movw	r28, r24
  _written = true;
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 510:	9b 8d       	ldd	r25, Y+27	; 0x1b
 512:	8c 8d       	ldd	r24, Y+28	; 0x1c
 514:	98 13       	cpse	r25, r24
 516:	05 c0       	rjmp	.+10     	; 0x522 <_ZN14HardwareSerial5writeEh+0x24>
 518:	e8 89       	ldd	r30, Y+16	; 0x10
 51a:	f9 89       	ldd	r31, Y+17	; 0x11
 51c:	80 81       	ld	r24, Z
 51e:	85 fd       	sbrc	r24, 5
 520:	23 c0       	rjmp	.+70     	; 0x568 <_ZN14HardwareSerial5writeEh+0x6a>
 522:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 524:	0b 8d       	ldd	r16, Y+27	; 0x1b
 526:	10 e0       	ldi	r17, 0x00	; 0
 528:	0f 5f       	subi	r16, 0xFF	; 255
 52a:	1f 4f       	sbci	r17, 0xFF	; 255
 52c:	0f 73       	andi	r16, 0x3F	; 63
 52e:	11 27       	eor	r17, r17
 530:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 532:	8c 8d       	ldd	r24, Y+28	; 0x1c
 534:	e8 12       	cpse	r14, r24
 536:	0b c0       	rjmp	.+22     	; 0x54e <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	07 fc       	sbrc	r0, 7
 53c:	fa cf       	rjmp	.-12     	; 0x532 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 53e:	e8 89       	ldd	r30, Y+16	; 0x10
 540:	f9 89       	ldd	r31, Y+17	; 0x11
 542:	80 81       	ld	r24, Z
 544:	85 ff       	sbrs	r24, 5
 546:	f5 cf       	rjmp	.-22     	; 0x532 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 548:	ce 01       	movw	r24, r28
 54a:	97 df       	rcall	.-210    	; 0x47a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 54c:	f2 cf       	rjmp	.-28     	; 0x532 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 54e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 550:	fe 01       	movw	r30, r28
 552:	e8 0f       	add	r30, r24
 554:	f1 1d       	adc	r31, r1
 556:	e3 5a       	subi	r30, 0xA3	; 163
 558:	ff 4f       	sbci	r31, 0xFF	; 255
 55a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 55c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 55e:	ea 89       	ldd	r30, Y+18	; 0x12
 560:	fb 89       	ldd	r31, Y+19	; 0x13
 562:	80 81       	ld	r24, Z
 564:	80 62       	ori	r24, 0x20	; 32
 566:	07 c0       	rjmp	.+14     	; 0x576 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 568:	ee 89       	ldd	r30, Y+22	; 0x16
 56a:	ff 89       	ldd	r31, Y+23	; 0x17
 56c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 56e:	e8 89       	ldd	r30, Y+16	; 0x10
 570:	f9 89       	ldd	r31, Y+17	; 0x11
 572:	80 81       	ld	r24, Z
 574:	80 64       	ori	r24, 0x40	; 64
 576:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	0f 91       	pop	r16
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	08 95       	ret

0000058a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 58a:	cf 92       	push	r12
 58c:	df 92       	push	r13
 58e:	ef 92       	push	r14
 590:	ff 92       	push	r15
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	ec 01       	movw	r28, r24
 59a:	6a 01       	movw	r12, r20
 59c:	7b 01       	movw	r14, r22
 59e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 5a0:	e8 89       	ldd	r30, Y+16	; 0x10
 5a2:	f9 89       	ldd	r31, Y+17	; 0x11
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5a8:	41 15       	cp	r20, r1
 5aa:	51 4e       	sbci	r21, 0xE1	; 225
 5ac:	61 05       	cpc	r22, r1
 5ae:	71 05       	cpc	r23, r1
 5b0:	a9 f0       	breq	.+42     	; 0x5dc <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	79 e0       	ldi	r23, 0x09	; 9
 5b6:	8d e3       	ldi	r24, 0x3D	; 61
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	a7 01       	movw	r20, r14
 5bc:	96 01       	movw	r18, r12
 5be:	fb d1       	rcall	.+1014   	; 0x9b6 <__udivmodsi4>
 5c0:	da 01       	movw	r26, r20
 5c2:	c9 01       	movw	r24, r18
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	a1 09       	sbc	r26, r1
 5c8:	b1 09       	sbc	r27, r1
 5ca:	b6 95       	lsr	r27
 5cc:	a7 95       	ror	r26
 5ce:	97 95       	ror	r25
 5d0:	87 95       	ror	r24
 5d2:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5d4:	41 15       	cp	r20, r1
 5d6:	80 e1       	ldi	r24, 0x10	; 16
 5d8:	58 07       	cpc	r21, r24
 5da:	a0 f0       	brcs	.+40     	; 0x604 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 5dc:	e8 89       	ldd	r30, Y+16	; 0x10
 5de:	f9 89       	ldd	r31, Y+17	; 0x11
 5e0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 5e2:	60 e8       	ldi	r22, 0x80	; 128
 5e4:	74 e8       	ldi	r23, 0x84	; 132
 5e6:	8e e1       	ldi	r24, 0x1E	; 30
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	a7 01       	movw	r20, r14
 5ec:	96 01       	movw	r18, r12
 5ee:	e3 d1       	rcall	.+966    	; 0x9b6 <__udivmodsi4>
 5f0:	ba 01       	movw	r22, r20
 5f2:	a9 01       	movw	r20, r18
 5f4:	41 50       	subi	r20, 0x01	; 1
 5f6:	51 09       	sbc	r21, r1
 5f8:	61 09       	sbc	r22, r1
 5fa:	71 09       	sbc	r23, r1
 5fc:	76 95       	lsr	r23
 5fe:	67 95       	ror	r22
 600:	57 95       	ror	r21
 602:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 604:	ec 85       	ldd	r30, Y+12	; 0x0c
 606:	fd 85       	ldd	r31, Y+13	; 0x0d
 608:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 60a:	ee 85       	ldd	r30, Y+14	; 0x0e
 60c:	ff 85       	ldd	r31, Y+15	; 0x0f
 60e:	40 83       	st	Z, r20

  _written = false;
 610:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 612:	ec 89       	ldd	r30, Y+20	; 0x14
 614:	fd 89       	ldd	r31, Y+21	; 0x15
 616:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 618:	ea 89       	ldd	r30, Y+18	; 0x12
 61a:	fb 89       	ldd	r31, Y+19	; 0x13
 61c:	80 81       	ld	r24, Z
 61e:	80 61       	ori	r24, 0x10	; 16
 620:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 622:	ea 89       	ldd	r30, Y+18	; 0x12
 624:	fb 89       	ldd	r31, Y+19	; 0x13
 626:	80 81       	ld	r24, Z
 628:	88 60       	ori	r24, 0x08	; 8
 62a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 62c:	ea 89       	ldd	r30, Y+18	; 0x12
 62e:	fb 89       	ldd	r31, Y+19	; 0x13
 630:	80 81       	ld	r24, Z
 632:	80 68       	ori	r24, 0x80	; 128
 634:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 636:	ea 89       	ldd	r30, Y+18	; 0x12
 638:	fb 89       	ldd	r31, Y+19	; 0x13
 63a:	80 81       	ld	r24, Z
 63c:	8f 7d       	andi	r24, 0xDF	; 223
 63e:	80 83       	st	Z, r24
}
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	df 90       	pop	r13
 64c:	cf 90       	pop	r12
 64e:	08 95       	ret

00000650 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	0b b6       	in	r0, 0x3b	; 59
 65c:	0f 92       	push	r0
 65e:	2f 93       	push	r18
 660:	8f 93       	push	r24
 662:	9f 93       	push	r25
 664:	ef 93       	push	r30
 666:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 668:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <Serial+0x10>
 66c:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <Serial+0x11>
 670:	80 81       	ld	r24, Z
 672:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <Serial+0x16>
 676:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <Serial+0x17>
 67a:	82 fd       	sbrc	r24, 2
 67c:	12 c0       	rjmp	.+36     	; 0x6a2 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 67e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 680:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <Serial+0x19>
 684:	8f 5f       	subi	r24, 0xFF	; 255
 686:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 688:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <Serial+0x1a>
 68c:	82 17       	cp	r24, r18
 68e:	51 f0       	breq	.+20     	; 0x6a4 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 690:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <Serial+0x19>
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	ee 5d       	subi	r30, 0xDE	; 222
 698:	fd 4f       	sbci	r31, 0xFD	; 253
 69a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 69c:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <Serial+0x19>
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 6a2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 6a4:	ff 91       	pop	r31
 6a6:	ef 91       	pop	r30
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	2f 91       	pop	r18
 6ae:	0f 90       	pop	r0
 6b0:	0b be       	out	0x3b, r0	; 59
 6b2:	0f 90       	pop	r0
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	0f 90       	pop	r0
 6b8:	1f 90       	pop	r1
 6ba:	18 95       	reti

000006bc <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
 6c6:	0b b6       	in	r0, 0x3b	; 59
 6c8:	0f 92       	push	r0
 6ca:	2f 93       	push	r18
 6cc:	3f 93       	push	r19
 6ce:	4f 93       	push	r20
 6d0:	5f 93       	push	r21
 6d2:	6f 93       	push	r22
 6d4:	7f 93       	push	r23
 6d6:	8f 93       	push	r24
 6d8:	9f 93       	push	r25
 6da:	af 93       	push	r26
 6dc:	bf 93       	push	r27
 6de:	ef 93       	push	r30
 6e0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 6e2:	82 e2       	ldi	r24, 0x22	; 34
 6e4:	92 e0       	ldi	r25, 0x02	; 2
 6e6:	c9 de       	rcall	.-622    	; 0x47a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 6e8:	ff 91       	pop	r31
 6ea:	ef 91       	pop	r30
 6ec:	bf 91       	pop	r27
 6ee:	af 91       	pop	r26
 6f0:	9f 91       	pop	r25
 6f2:	8f 91       	pop	r24
 6f4:	7f 91       	pop	r23
 6f6:	6f 91       	pop	r22
 6f8:	5f 91       	pop	r21
 6fa:	4f 91       	pop	r20
 6fc:	3f 91       	pop	r19
 6fe:	2f 91       	pop	r18
 700:	0f 90       	pop	r0
 702:	0b be       	out	0x3b, r0	; 59
 704:	0f 90       	pop	r0
 706:	0f be       	out	0x3f, r0	; 63
 708:	0f 90       	pop	r0
 70a:	1f 90       	pop	r1
 70c:	18 95       	reti

0000070e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 70e:	82 e2       	ldi	r24, 0x22	; 34
 710:	92 e0       	ldi	r25, 0x02	; 2
 712:	49 de       	rcall	.-878    	; 0x3a6 <_ZN14HardwareSerial9availableEv>
 714:	21 e0       	ldi	r18, 0x01	; 1
 716:	89 2b       	or	r24, r25
 718:	09 f4       	brne	.+2      	; 0x71c <_Z17Serial0_availablev+0xe>
 71a:	20 e0       	ldi	r18, 0x00	; 0
}
 71c:	82 2f       	mov	r24, r18
 71e:	08 95       	ret

00000720 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 720:	e2 e2       	ldi	r30, 0x22	; 34
 722:	f2 e0       	ldi	r31, 0x02	; 2
 724:	13 82       	std	Z+3, r1	; 0x03
 726:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 728:	88 ee       	ldi	r24, 0xE8	; 232
 72a:	93 e0       	ldi	r25, 0x03	; 3
 72c:	a0 e0       	ldi	r26, 0x00	; 0
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	84 83       	std	Z+4, r24	; 0x04
 732:	95 83       	std	Z+5, r25	; 0x05
 734:	a6 83       	std	Z+6, r26	; 0x06
 736:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 738:	8c e0       	ldi	r24, 0x0C	; 12
 73a:	92 e0       	ldi	r25, 0x02	; 2
 73c:	91 83       	std	Z+1, r25	; 0x01
 73e:	80 83       	st	Z, r24
 740:	85 ec       	ldi	r24, 0xC5	; 197
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	95 87       	std	Z+13, r25	; 0x0d
 746:	84 87       	std	Z+12, r24	; 0x0c
 748:	84 ec       	ldi	r24, 0xC4	; 196
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	97 87       	std	Z+15, r25	; 0x0f
 74e:	86 87       	std	Z+14, r24	; 0x0e
 750:	80 ec       	ldi	r24, 0xC0	; 192
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	91 8b       	std	Z+17, r25	; 0x11
 756:	80 8b       	std	Z+16, r24	; 0x10
 758:	81 ec       	ldi	r24, 0xC1	; 193
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	93 8b       	std	Z+19, r25	; 0x13
 75e:	82 8b       	std	Z+18, r24	; 0x12
 760:	82 ec       	ldi	r24, 0xC2	; 194
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	95 8b       	std	Z+21, r25	; 0x15
 766:	84 8b       	std	Z+20, r24	; 0x14
 768:	86 ec       	ldi	r24, 0xC6	; 198
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	97 8b       	std	Z+23, r25	; 0x17
 76e:	86 8b       	std	Z+22, r24	; 0x16
 770:	11 8e       	std	Z+25, r1	; 0x19
 772:	12 8e       	std	Z+26, r1	; 0x1a
 774:	13 8e       	std	Z+27, r1	; 0x1b
 776:	14 8e       	std	Z+28, r1	; 0x1c
 778:	08 95       	ret

0000077a <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 77a:	08 95       	ret

0000077c <main>:

int main(void)
{
	init();
 77c:	7e d0       	rcall	.+252    	; 0x87a <init>

	initVariant();
 77e:	fd df       	rcall	.-6      	; 0x77a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 780:	42 dd       	rcall	.-1404   	; 0x206 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 782:	c1 e0       	ldi	r28, 0x01	; 1
 784:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 786:	94 dd       	rcall	.-1240   	; 0x2b0 <loop>
		if (serialEventRun) serialEventRun();
 788:	20 97       	sbiw	r28, 0x00	; 0
 78a:	e9 f3       	breq	.-6      	; 0x786 <main+0xa>
 78c:	3a de       	rcall	.-908    	; 0x402 <_Z14serialEventRunv>
 78e:	fb cf       	rjmp	.-10     	; 0x786 <main+0xa>

00000790 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 790:	cf 92       	push	r12
 792:	df 92       	push	r13
 794:	ef 92       	push	r14
 796:	ff 92       	push	r15
 798:	0f 93       	push	r16
 79a:	1f 93       	push	r17
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	6c 01       	movw	r12, r24
 7a2:	7a 01       	movw	r14, r20
 7a4:	8b 01       	movw	r16, r22
  size_t n = 0;
 7a6:	c0 e0       	ldi	r28, 0x00	; 0
 7a8:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 7aa:	ce 15       	cp	r28, r14
 7ac:	df 05       	cpc	r29, r15
 7ae:	89 f0       	breq	.+34     	; 0x7d2 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
 7b0:	d8 01       	movw	r26, r16
 7b2:	6d 91       	ld	r22, X+
 7b4:	8d 01       	movw	r16, r26
 7b6:	d6 01       	movw	r26, r12
 7b8:	ed 91       	ld	r30, X+
 7ba:	fc 91       	ld	r31, X
 7bc:	01 90       	ld	r0, Z+
 7be:	f0 81       	ld	r31, Z
 7c0:	e0 2d       	mov	r30, r0
 7c2:	c6 01       	movw	r24, r12
 7c4:	19 95       	eicall
 7c6:	89 2b       	or	r24, r25
 7c8:	11 f4       	brne	.+4      	; 0x7ce <_ZN5Print5writeEPKhj+0x3e>
 7ca:	7e 01       	movw	r14, r28
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <_ZN5Print5writeEPKhj+0x42>
 7ce:	21 96       	adiw	r28, 0x01	; 1
 7d0:	ec cf       	rjmp	.-40     	; 0x7aa <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
 7d2:	c7 01       	movw	r24, r14
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	ff 90       	pop	r15
 7de:	ef 90       	pop	r14
 7e0:	df 90       	pop	r13
 7e2:	cf 90       	pop	r12
 7e4:	08 95       	ret

000007e6 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 7e6:	1f 92       	push	r1
 7e8:	0f 92       	push	r0
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	0f 92       	push	r0
 7ee:	11 24       	eor	r1, r1
 7f0:	2f 93       	push	r18
 7f2:	3f 93       	push	r19
 7f4:	8f 93       	push	r24
 7f6:	9f 93       	push	r25
 7f8:	af 93       	push	r26
 7fa:	bf 93       	push	r27
 7fc:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <timer0_millis>
 800:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <timer0_millis+0x1>
 804:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <timer0_millis+0x2>
 808:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <timer0_millis+0x3>
 80c:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <timer0_fract>
 810:	23 e0       	ldi	r18, 0x03	; 3
 812:	23 0f       	add	r18, r19
 814:	2d 37       	cpi	r18, 0x7D	; 125
 816:	20 f4       	brcc	.+8      	; 0x820 <__vector_23+0x3a>
 818:	01 96       	adiw	r24, 0x01	; 1
 81a:	a1 1d       	adc	r26, r1
 81c:	b1 1d       	adc	r27, r1
 81e:	05 c0       	rjmp	.+10     	; 0x82a <__vector_23+0x44>
 820:	26 e8       	ldi	r18, 0x86	; 134
 822:	23 0f       	add	r18, r19
 824:	02 96       	adiw	r24, 0x02	; 2
 826:	a1 1d       	adc	r26, r1
 828:	b1 1d       	adc	r27, r1
 82a:	20 93 bf 02 	sts	0x02BF, r18	; 0x8002bf <timer0_fract>
 82e:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <timer0_millis>
 832:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <timer0_millis+0x1>
 836:	a0 93 c2 02 	sts	0x02C2, r26	; 0x8002c2 <timer0_millis+0x2>
 83a:	b0 93 c3 02 	sts	0x02C3, r27	; 0x8002c3 <timer0_millis+0x3>
 83e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <timer0_overflow_count>
 842:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <timer0_overflow_count+0x1>
 846:	a0 91 c6 02 	lds	r26, 0x02C6	; 0x8002c6 <timer0_overflow_count+0x2>
 84a:	b0 91 c7 02 	lds	r27, 0x02C7	; 0x8002c7 <timer0_overflow_count+0x3>
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	a1 1d       	adc	r26, r1
 852:	b1 1d       	adc	r27, r1
 854:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <timer0_overflow_count>
 858:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <timer0_overflow_count+0x1>
 85c:	a0 93 c6 02 	sts	0x02C6, r26	; 0x8002c6 <timer0_overflow_count+0x2>
 860:	b0 93 c7 02 	sts	0x02C7, r27	; 0x8002c7 <timer0_overflow_count+0x3>
 864:	bf 91       	pop	r27
 866:	af 91       	pop	r26
 868:	9f 91       	pop	r25
 86a:	8f 91       	pop	r24
 86c:	3f 91       	pop	r19
 86e:	2f 91       	pop	r18
 870:	0f 90       	pop	r0
 872:	0f be       	out	0x3f, r0	; 63
 874:	0f 90       	pop	r0
 876:	1f 90       	pop	r1
 878:	18 95       	reti

0000087a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 87a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 87c:	84 b5       	in	r24, 0x24	; 36
 87e:	82 60       	ori	r24, 0x02	; 2
 880:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 882:	84 b5       	in	r24, 0x24	; 36
 884:	81 60       	ori	r24, 0x01	; 1
 886:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 888:	85 b5       	in	r24, 0x25	; 37
 88a:	82 60       	ori	r24, 0x02	; 2
 88c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 88e:	85 b5       	in	r24, 0x25	; 37
 890:	81 60       	ori	r24, 0x01	; 1
 892:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 894:	ee e6       	ldi	r30, 0x6E	; 110
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	81 60       	ori	r24, 0x01	; 1
 89c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 89e:	e1 e8       	ldi	r30, 0x81	; 129
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8a4:	80 81       	ld	r24, Z
 8a6:	82 60       	ori	r24, 0x02	; 2
 8a8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 8aa:	80 81       	ld	r24, Z
 8ac:	81 60       	ori	r24, 0x01	; 1
 8ae:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 8b0:	e0 e8       	ldi	r30, 0x80	; 128
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	80 81       	ld	r24, Z
 8b6:	81 60       	ori	r24, 0x01	; 1
 8b8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 8ba:	e1 eb       	ldi	r30, 0xB1	; 177
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	84 60       	ori	r24, 0x04	; 4
 8c2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 8c4:	e0 eb       	ldi	r30, 0xB0	; 176
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
 8ca:	81 60       	ori	r24, 0x01	; 1
 8cc:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 8ce:	e1 e9       	ldi	r30, 0x91	; 145
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	82 60       	ori	r24, 0x02	; 2
 8d6:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 8d8:	80 81       	ld	r24, Z
 8da:	81 60       	ori	r24, 0x01	; 1
 8dc:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 8de:	e0 e9       	ldi	r30, 0x90	; 144
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	81 60       	ori	r24, 0x01	; 1
 8e6:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 8e8:	e1 ea       	ldi	r30, 0xA1	; 161
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	82 60       	ori	r24, 0x02	; 2
 8f0:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 8f2:	80 81       	ld	r24, Z
 8f4:	81 60       	ori	r24, 0x01	; 1
 8f6:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 8f8:	e0 ea       	ldi	r30, 0xA0	; 160
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	81 60       	ori	r24, 0x01	; 1
 900:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 902:	e1 e2       	ldi	r30, 0x21	; 33
 904:	f1 e0       	ldi	r31, 0x01	; 1
 906:	80 81       	ld	r24, Z
 908:	82 60       	ori	r24, 0x02	; 2
 90a:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 90c:	80 81       	ld	r24, Z
 90e:	81 60       	ori	r24, 0x01	; 1
 910:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 912:	e0 e2       	ldi	r30, 0x20	; 32
 914:	f1 e0       	ldi	r31, 0x01	; 1
 916:	80 81       	ld	r24, Z
 918:	81 60       	ori	r24, 0x01	; 1
 91a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 91c:	ea e7       	ldi	r30, 0x7A	; 122
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	84 60       	ori	r24, 0x04	; 4
 924:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 926:	80 81       	ld	r24, Z
 928:	82 60       	ori	r24, 0x02	; 2
 92a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 92c:	80 81       	ld	r24, Z
 92e:	81 60       	ori	r24, 0x01	; 1
 930:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 932:	80 81       	ld	r24, Z
 934:	80 68       	ori	r24, 0x80	; 128
 936:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 938:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 93c:	08 95       	ret

0000093e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 93e:	cf 93       	push	r28
 940:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	fc 01       	movw	r30, r24
 946:	ec 51       	subi	r30, 0x1C	; 28
 948:	ff 4f       	sbci	r31, 0xFF	; 255
 94a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 94c:	fc 01       	movw	r30, r24
 94e:	e6 5d       	subi	r30, 0xD6	; 214
 950:	fe 4f       	sbci	r31, 0xFE	; 254
 952:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 954:	88 23       	and	r24, r24
 956:	61 f1       	breq	.+88     	; 0x9b0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	88 0f       	add	r24, r24
 95c:	99 1f       	adc	r25, r25
 95e:	fc 01       	movw	r30, r24
 960:	e6 57       	subi	r30, 0x76	; 118
 962:	fe 4f       	sbci	r31, 0xFE	; 254
 964:	c5 91       	lpm	r28, Z+
 966:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 968:	fc 01       	movw	r30, r24
 96a:	e0 59       	subi	r30, 0x90	; 144
 96c:	fe 4f       	sbci	r31, 0xFE	; 254
 96e:	a5 91       	lpm	r26, Z+
 970:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 972:	61 11       	cpse	r22, r1
 974:	09 c0       	rjmp	.+18     	; 0x988 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 976:	9f b7       	in	r25, 0x3f	; 63
                cli();
 978:	f8 94       	cli
		*reg &= ~bit;
 97a:	88 81       	ld	r24, Y
 97c:	20 95       	com	r18
 97e:	82 23       	and	r24, r18
 980:	88 83       	st	Y, r24
		*out &= ~bit;
 982:	ec 91       	ld	r30, X
 984:	2e 23       	and	r18, r30
 986:	0b c0       	rjmp	.+22     	; 0x99e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 988:	62 30       	cpi	r22, 0x02	; 2
 98a:	61 f4       	brne	.+24     	; 0x9a4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 98c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 98e:	f8 94       	cli
		*reg &= ~bit;
 990:	38 81       	ld	r19, Y
 992:	82 2f       	mov	r24, r18
 994:	80 95       	com	r24
 996:	83 23       	and	r24, r19
 998:	88 83       	st	Y, r24
		*out |= bit;
 99a:	ec 91       	ld	r30, X
 99c:	2e 2b       	or	r18, r30
 99e:	2c 93       	st	X, r18
		SREG = oldSREG;
 9a0:	9f bf       	out	0x3f, r25	; 63
 9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 9a4:	8f b7       	in	r24, 0x3f	; 63
                cli();
 9a6:	f8 94       	cli
		*reg |= bit;
 9a8:	e8 81       	ld	r30, Y
 9aa:	2e 2b       	or	r18, r30
 9ac:	28 83       	st	Y, r18
		SREG = oldSREG;
 9ae:	8f bf       	out	0x3f, r24	; 63
	}
}
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	08 95       	ret

000009b6 <__udivmodsi4>:
 9b6:	a1 e2       	ldi	r26, 0x21	; 33
 9b8:	1a 2e       	mov	r1, r26
 9ba:	aa 1b       	sub	r26, r26
 9bc:	bb 1b       	sub	r27, r27
 9be:	fd 01       	movw	r30, r26
 9c0:	0d c0       	rjmp	.+26     	; 0x9dc <__udivmodsi4_ep>

000009c2 <__udivmodsi4_loop>:
 9c2:	aa 1f       	adc	r26, r26
 9c4:	bb 1f       	adc	r27, r27
 9c6:	ee 1f       	adc	r30, r30
 9c8:	ff 1f       	adc	r31, r31
 9ca:	a2 17       	cp	r26, r18
 9cc:	b3 07       	cpc	r27, r19
 9ce:	e4 07       	cpc	r30, r20
 9d0:	f5 07       	cpc	r31, r21
 9d2:	20 f0       	brcs	.+8      	; 0x9dc <__udivmodsi4_ep>
 9d4:	a2 1b       	sub	r26, r18
 9d6:	b3 0b       	sbc	r27, r19
 9d8:	e4 0b       	sbc	r30, r20
 9da:	f5 0b       	sbc	r31, r21

000009dc <__udivmodsi4_ep>:
 9dc:	66 1f       	adc	r22, r22
 9de:	77 1f       	adc	r23, r23
 9e0:	88 1f       	adc	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	1a 94       	dec	r1
 9e6:	69 f7       	brne	.-38     	; 0x9c2 <__udivmodsi4_loop>
 9e8:	60 95       	com	r22
 9ea:	70 95       	com	r23
 9ec:	80 95       	com	r24
 9ee:	90 95       	com	r25
 9f0:	9b 01       	movw	r18, r22
 9f2:	ac 01       	movw	r20, r24
 9f4:	bd 01       	movw	r22, r26
 9f6:	cf 01       	movw	r24, r30
 9f8:	08 95       	ret

000009fa <__tablejump2__>:
 9fa:	ee 0f       	add	r30, r30
 9fc:	ff 1f       	adc	r31, r31
 9fe:	88 1f       	adc	r24, r24
 a00:	8b bf       	out	0x3b, r24	; 59
 a02:	07 90       	elpm	r0, Z+
 a04:	f6 91       	elpm	r31, Z
 a06:	e0 2d       	mov	r30, r0
 a08:	19 94       	eijmp

00000a0a <__muluhisi3>:
 a0a:	09 d0       	rcall	.+18     	; 0xa1e <__umulhisi3>
 a0c:	a5 9f       	mul	r26, r21
 a0e:	90 0d       	add	r25, r0
 a10:	b4 9f       	mul	r27, r20
 a12:	90 0d       	add	r25, r0
 a14:	a4 9f       	mul	r26, r20
 a16:	80 0d       	add	r24, r0
 a18:	91 1d       	adc	r25, r1
 a1a:	11 24       	eor	r1, r1
 a1c:	08 95       	ret

00000a1e <__umulhisi3>:
 a1e:	a2 9f       	mul	r26, r18
 a20:	b0 01       	movw	r22, r0
 a22:	b3 9f       	mul	r27, r19
 a24:	c0 01       	movw	r24, r0
 a26:	a3 9f       	mul	r26, r19
 a28:	70 0d       	add	r23, r0
 a2a:	81 1d       	adc	r24, r1
 a2c:	11 24       	eor	r1, r1
 a2e:	91 1d       	adc	r25, r1
 a30:	b2 9f       	mul	r27, r18
 a32:	70 0d       	add	r23, r0
 a34:	81 1d       	adc	r24, r1
 a36:	11 24       	eor	r1, r1
 a38:	91 1d       	adc	r25, r1
 a3a:	08 95       	ret

00000a3c <_exit>:
 a3c:	f8 94       	cli

00000a3e <__stop_program>:
 a3e:	ff cf       	rjmp	.-2      	; 0xa3e <__stop_program>
