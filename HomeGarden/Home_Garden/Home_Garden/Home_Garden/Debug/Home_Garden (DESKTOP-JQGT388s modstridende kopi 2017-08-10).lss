
Home_Garden.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000b1c  00000bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800210  00800210  00000bc0  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000816f  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d01  00000000  00000000  00009057  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000181a  00000000  00000000  0000ad58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000748  00000000  00000000  0000c574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000236d  00000000  00000000  0000ccbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a93  00000000  00000000  0000f029  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00011abc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	07 c1       	rjmp	.+526    	; 0x210 <__ctors_end>
   2:	00 00       	nop
   4:	33 c1       	rjmp	.+614    	; 0x26c <__bad_interrupt>
   6:	00 00       	nop
   8:	31 c1       	rjmp	.+610    	; 0x26c <__bad_interrupt>
   a:	00 00       	nop
   c:	2f c1       	rjmp	.+606    	; 0x26c <__bad_interrupt>
   e:	00 00       	nop
  10:	2d c1       	rjmp	.+602    	; 0x26c <__bad_interrupt>
  12:	00 00       	nop
  14:	2b c1       	rjmp	.+598    	; 0x26c <__bad_interrupt>
  16:	00 00       	nop
  18:	29 c1       	rjmp	.+594    	; 0x26c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	27 c1       	rjmp	.+590    	; 0x26c <__bad_interrupt>
  1e:	00 00       	nop
  20:	25 c1       	rjmp	.+586    	; 0x26c <__bad_interrupt>
  22:	00 00       	nop
  24:	23 c1       	rjmp	.+582    	; 0x26c <__bad_interrupt>
  26:	00 00       	nop
  28:	21 c1       	rjmp	.+578    	; 0x26c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1f c1       	rjmp	.+574    	; 0x26c <__bad_interrupt>
  2e:	00 00       	nop
  30:	1d c1       	rjmp	.+570    	; 0x26c <__bad_interrupt>
  32:	00 00       	nop
  34:	1b c1       	rjmp	.+566    	; 0x26c <__bad_interrupt>
  36:	00 00       	nop
  38:	19 c1       	rjmp	.+562    	; 0x26c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	17 c1       	rjmp	.+558    	; 0x26c <__bad_interrupt>
  3e:	00 00       	nop
  40:	15 c1       	rjmp	.+554    	; 0x26c <__bad_interrupt>
  42:	00 00       	nop
  44:	13 c1       	rjmp	.+550    	; 0x26c <__bad_interrupt>
  46:	00 00       	nop
  48:	11 c1       	rjmp	.+546    	; 0x26c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0f c1       	rjmp	.+542    	; 0x26c <__bad_interrupt>
  4e:	00 00       	nop
  50:	0d c1       	rjmp	.+538    	; 0x26c <__bad_interrupt>
  52:	00 00       	nop
  54:	0b c1       	rjmp	.+534    	; 0x26c <__bad_interrupt>
  56:	00 00       	nop
  58:	09 c1       	rjmp	.+530    	; 0x26c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	69 c3       	rjmp	.+1746   	; 0x730 <__vector_23>
  5e:	00 00       	nop
  60:	05 c1       	rjmp	.+522    	; 0x26c <__bad_interrupt>
  62:	00 00       	nop
  64:	9b c2       	rjmp	.+1334   	; 0x59c <__vector_25>
  66:	00 00       	nop
  68:	cf c2       	rjmp	.+1438   	; 0x608 <__vector_26>
  6a:	00 00       	nop
  6c:	ff c0       	rjmp	.+510    	; 0x26c <__bad_interrupt>
  6e:	00 00       	nop
  70:	fd c0       	rjmp	.+506    	; 0x26c <__bad_interrupt>
  72:	00 00       	nop
  74:	fb c0       	rjmp	.+502    	; 0x26c <__bad_interrupt>
  76:	00 00       	nop
  78:	f9 c0       	rjmp	.+498    	; 0x26c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	f7 c0       	rjmp	.+494    	; 0x26c <__bad_interrupt>
  7e:	00 00       	nop
  80:	f5 c0       	rjmp	.+490    	; 0x26c <__bad_interrupt>
  82:	00 00       	nop
  84:	f3 c0       	rjmp	.+486    	; 0x26c <__bad_interrupt>
  86:	00 00       	nop
  88:	f1 c0       	rjmp	.+482    	; 0x26c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ef c0       	rjmp	.+478    	; 0x26c <__bad_interrupt>
  8e:	00 00       	nop
  90:	ed c0       	rjmp	.+474    	; 0x26c <__bad_interrupt>
  92:	00 00       	nop
  94:	eb c0       	rjmp	.+470    	; 0x26c <__bad_interrupt>
  96:	00 00       	nop
  98:	e9 c0       	rjmp	.+466    	; 0x26c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	e7 c0       	rjmp	.+462    	; 0x26c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	e5 c0       	rjmp	.+458    	; 0x26c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	e3 c0       	rjmp	.+454    	; 0x26c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e1 c0       	rjmp	.+450    	; 0x26c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	df c0       	rjmp	.+446    	; 0x26c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	dd c0       	rjmp	.+442    	; 0x26c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	db c0       	rjmp	.+438    	; 0x26c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	d9 c0       	rjmp	.+434    	; 0x26c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	d7 c0       	rjmp	.+430    	; 0x26c <__bad_interrupt>
  be:	00 00       	nop
  c0:	d5 c0       	rjmp	.+426    	; 0x26c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	d3 c0       	rjmp	.+422    	; 0x26c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	d1 c0       	rjmp	.+418    	; 0x26c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	cf c0       	rjmp	.+414    	; 0x26c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	cd c0       	rjmp	.+410    	; 0x26c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	cb c0       	rjmp	.+406    	; 0x26c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	c9 c0       	rjmp	.+402    	; 0x26c <__bad_interrupt>
  da:	00 00       	nop
  dc:	c7 c0       	rjmp	.+398    	; 0x26c <__bad_interrupt>
  de:	00 00       	nop
  e0:	c5 c0       	rjmp	.+394    	; 0x26c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	bc 04       	cpc	r11, r12
  e6:	bf 04       	cpc	r11, r15
  e8:	ae 04       	cpc	r10, r14
  ea:	b2 04       	cpc	r11, r2
  ec:	b8 04       	cpc	r11, r8
  ee:	f6 04       	cpc	r15, r6
  f0:	c3 04       	cpc	r12, r3
  f2:	c7 04       	cpc	r12, r7
  f4:	cd 04       	cpc	r12, r13
  f6:	d1 04       	cpc	r13, r1
  f8:	d5 04       	cpc	r13, r5
  fa:	db 04       	cpc	r13, r11
  fc:	df 04       	cpc	r13, r15
  fe:	e3 04       	cpc	r14, r3
 100:	f6 04       	cpc	r15, r6
 102:	e9 04       	cpc	r14, r9
 104:	ed 04       	cpc	r14, r13
 106:	f1 04       	cpc	r15, r1

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
 1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
 1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
 20e:	36 03       	mulsu	r19, r22

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d1 e2       	ldi	r29, 0x21	; 33
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	0c bf       	out	0x3c, r16	; 60

00000220 <__do_copy_data>:
 220:	12 e0       	ldi	r17, 0x02	; 2
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b2 e0       	ldi	r27, 0x02	; 2
 226:	ec e1       	ldi	r30, 0x1C	; 28
 228:	fb e0       	ldi	r31, 0x0B	; 11
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	0b bf       	out	0x3b, r16	; 59
 22e:	02 c0       	rjmp	.+4      	; 0x234 <__do_copy_data+0x14>
 230:	07 90       	elpm	r0, Z+
 232:	0d 92       	st	X+, r0
 234:	a0 31       	cpi	r26, 0x10	; 16
 236:	b1 07       	cpc	r27, r17
 238:	d9 f7       	brne	.-10     	; 0x230 <__do_copy_data+0x10>

0000023a <__do_clear_bss>:
 23a:	22 e0       	ldi	r18, 0x02	; 2
 23c:	a0 e1       	ldi	r26, 0x10	; 16
 23e:	b2 e0       	ldi	r27, 0x02	; 2
 240:	01 c0       	rjmp	.+2      	; 0x244 <.do_clear_bss_start>

00000242 <.do_clear_bss_loop>:
 242:	1d 92       	st	X+, r1

00000244 <.do_clear_bss_start>:
 244:	a6 3b       	cpi	r26, 0xB6	; 182
 246:	b2 07       	cpc	r27, r18
 248:	e1 f7       	brne	.-8      	; 0x242 <.do_clear_bss_loop>

0000024a <__do_global_ctors>:
 24a:	11 e0       	ldi	r17, 0x01	; 1
 24c:	c8 e0       	ldi	r28, 0x08	; 8
 24e:	d1 e0       	ldi	r29, 0x01	; 1
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	05 c0       	rjmp	.+10     	; 0x25e <__do_global_ctors+0x14>
 254:	21 97       	sbiw	r28, 0x01	; 1
 256:	01 09       	sbc	r16, r1
 258:	80 2f       	mov	r24, r16
 25a:	fe 01       	movw	r30, r28
 25c:	55 d4       	rcall	.+2218   	; 0xb08 <__tablejump2__>
 25e:	c7 30       	cpi	r28, 0x07	; 7
 260:	d1 07       	cpc	r29, r17
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 07       	cpc	r16, r24
 266:	b1 f7       	brne	.-20     	; 0x254 <__do_global_ctors+0xa>
 268:	2f d2       	rcall	.+1118   	; 0x6c8 <main>
 26a:	56 c4       	rjmp	.+2220   	; 0xb18 <_exit>

0000026c <__bad_interrupt>:
 26c:	c9 ce       	rjmp	.-622    	; 0x0 <__vectors>

0000026e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 26e:	26 e0       	ldi	r18, 0x06	; 6
 270:	40 e8       	ldi	r20, 0x80	; 128
 272:	55 e2       	ldi	r21, 0x25	; 37
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 e1       	ldi	r24, 0x10	; 16
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	2c d1       	rcall	.+600    	; 0x4d6 <_ZN14HardwareSerial5beginEmh>
int SoilSensor6 = 5;

void setup() {
	Serial.begin(9600);

	pinMode( Disp1	, OUTPUT);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	86 e1       	ldi	r24, 0x16	; 22
	pinMode( Disp2	, OUTPUT);
 282:	b5 d3       	rcall	.+1898   	; 0x9ee <pinMode>
 284:	61 e0       	ldi	r22, 0x01	; 1
	pinMode( Disp3	, OUTPUT);
 286:	87 e1       	ldi	r24, 0x17	; 23
 288:	b2 d3       	rcall	.+1892   	; 0x9ee <pinMode>
 28a:	61 e0       	ldi	r22, 0x01	; 1
	pinMode( Disp4	, OUTPUT);
 28c:	88 e1       	ldi	r24, 0x18	; 24
 28e:	af d3       	rcall	.+1886   	; 0x9ee <pinMode>
	pinMode( HEX1	, OUTPUT);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	89 e1       	ldi	r24, 0x19	; 25
	pinMode( HEX2	, OUTPUT);
 294:	ac d3       	rcall	.+1880   	; 0x9ee <pinMode>
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	8a e1       	ldi	r24, 0x1A	; 26
	pinMode( HEX3	, OUTPUT);
 29a:	a9 d3       	rcall	.+1874   	; 0x9ee <pinMode>
 29c:	61 e0       	ldi	r22, 0x01	; 1
	pinMode( HEX4	, OUTPUT);
 29e:	8b e1       	ldi	r24, 0x1B	; 27
 2a0:	a6 d3       	rcall	.+1868   	; 0x9ee <pinMode>
	pinMode( HEX5	, OUTPUT);
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	8c e1       	ldi	r24, 0x1C	; 28
 2a6:	a3 d3       	rcall	.+1862   	; 0x9ee <pinMode>
	pinMode( HEX6	, OUTPUT);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	8d e1       	ldi	r24, 0x1D	; 29

	pinMode( Pumpe	, OUTPUT);
 2ac:	a0 d3       	rcall	.+1856   	; 0x9ee <pinMode>
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	8e e1       	ldi	r24, 0x1E	; 30
	pinMode( ventil1 , OUTPUT);
 2b2:	9d d3       	rcall	.+1850   	; 0x9ee <pinMode>
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	8f e1       	ldi	r24, 0x1F	; 31
 2b8:	9a d3       	rcall	.+1844   	; 0x9ee <pinMode>
	pinMode( ventil2 , OUTPUT);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	84 e2       	ldi	r24, 0x24	; 36
 2be:	97 d3       	rcall	.+1838   	; 0x9ee <pinMode>
 2c0:	61 e0       	ldi	r22, 0x01	; 1
	pinMode( ventil3 , OUTPUT);
 2c2:	86 e2       	ldi	r24, 0x26	; 38
 2c4:	94 d3       	rcall	.+1832   	; 0x9ee <pinMode>
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	87 e2       	ldi	r24, 0x27	; 39
 2ca:	91 d3       	rcall	.+1826   	; 0x9ee <pinMode>
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	88 e2       	ldi	r24, 0x28	; 40
 2d0:	8e c3       	rjmp	.+1820   	; 0x9ee <pinMode>

000002d2 <loop>:
}

// the loop function runs over and over again forever
void loop() {
	  // turn LED on:
	  digitalWrite(ventil3, HIGH);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	88 e2       	ldi	r24, 0x28	; 40
 2d6:	c7 d3       	rcall	.+1934   	; 0xa66 <digitalWrite>
	  delay(1000);
 2d8:	68 ee       	ldi	r22, 0xE8	; 232
 2da:	73 e0       	ldi	r23, 0x03	; 3
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
	  digitalWrite(ventil3, LOW);
 2e0:	96 d2       	rcall	.+1324   	; 0x80e <delay>
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	88 e2       	ldi	r24, 0x28	; 40
	  delay(1000);
 2e6:	bf d3       	rcall	.+1918   	; 0xa66 <digitalWrite>
 2e8:	68 ee       	ldi	r22, 0xE8	; 232
 2ea:	73 e0       	ldi	r23, 0x03	; 3
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	8e c2       	rjmp	.+1308   	; 0x80e <delay>

000002f2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2f2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2f4:	91 8d       	ldd	r25, Z+25	; 0x19
 2f6:	22 8d       	ldd	r18, Z+26	; 0x1a
 2f8:	89 2f       	mov	r24, r25
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	80 5c       	subi	r24, 0xC0	; 192
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	82 1b       	sub	r24, r18
 302:	91 09       	sbc	r25, r1
}
 304:	8f 73       	andi	r24, 0x3F	; 63
 306:	99 27       	eor	r25, r25
 308:	08 95       	ret

0000030a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 30a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 30c:	91 8d       	ldd	r25, Z+25	; 0x19
 30e:	82 8d       	ldd	r24, Z+26	; 0x1a
 310:	98 17       	cp	r25, r24
 312:	31 f0       	breq	.+12     	; 0x320 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 314:	82 8d       	ldd	r24, Z+26	; 0x1a
 316:	e8 0f       	add	r30, r24
 318:	f1 1d       	adc	r31, r1
 31a:	85 8d       	ldd	r24, Z+29	; 0x1d
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 324:	08 95       	ret

00000326 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 326:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 328:	91 8d       	ldd	r25, Z+25	; 0x19
 32a:	82 8d       	ldd	r24, Z+26	; 0x1a
 32c:	98 17       	cp	r25, r24
 32e:	61 f0       	breq	.+24     	; 0x348 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 330:	82 8d       	ldd	r24, Z+26	; 0x1a
 332:	df 01       	movw	r26, r30
 334:	a8 0f       	add	r26, r24
 336:	b1 1d       	adc	r27, r1
 338:	5d 96       	adiw	r26, 0x1d	; 29
 33a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 33c:	92 8d       	ldd	r25, Z+26	; 0x1a
 33e:	9f 5f       	subi	r25, 0xFF	; 255
 340:	9f 73       	andi	r25, 0x3F	; 63
 342:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 34c:	08 95       	ret

0000034e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 34e:	8d e2       	ldi	r24, 0x2D	; 45
 350:	93 e0       	ldi	r25, 0x03	; 3
 352:	89 2b       	or	r24, r25
 354:	39 f0       	breq	.+14     	; 0x364 <_Z14serialEventRunv+0x16>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	89 2b       	or	r24, r25
 35c:	19 f0       	breq	.+6      	; 0x364 <_Z14serialEventRunv+0x16>
 35e:	7d d1       	rcall	.+762    	; 0x65a <_Z17Serial0_availablev>
 360:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 362:	25 c0       	rjmp	.+74     	; 0x3ae <_Z14serialEventRunv+0x60>
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	89 2b       	or	r24, r25
 36a:	41 f0       	breq	.+16     	; 0x37c <_Z14serialEventRunv+0x2e>
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	89 2b       	or	r24, r25
 372:	21 f0       	breq	.+8      	; 0x37c <_Z14serialEventRunv+0x2e>
 374:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 378:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 37a:	1c c0       	rjmp	.+56     	; 0x3b4 <_Z14serialEventRunv+0x66>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	89 2b       	or	r24, r25
 382:	41 f0       	breq	.+16     	; 0x394 <_Z14serialEventRunv+0x46>
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	89 2b       	or	r24, r25
 38a:	21 f0       	breq	.+8      	; 0x394 <_Z14serialEventRunv+0x46>
 38c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 390:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 392:	13 c0       	rjmp	.+38     	; 0x3ba <_Z14serialEventRunv+0x6c>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	89 2b       	or	r24, r25
 39a:	a1 f0       	breq	.+40     	; 0x3c4 <_Z14serialEventRunv+0x76>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	89 2b       	or	r24, r25
 3a2:	81 f0       	breq	.+32     	; 0x3c4 <_Z14serialEventRunv+0x76>
 3a4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3a8:	81 11       	cpse	r24, r1
 3aa:	0a c0       	rjmp	.+20     	; 0x3c0 <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 3ac:	08 95       	ret
 3ae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 3b2:	d8 cf       	rjmp	.-80     	; 0x364 <_Z14serialEventRunv+0x16>
 3b4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 3b8:	e1 cf       	rjmp	.-62     	; 0x37c <_Z14serialEventRunv+0x2e>
 3ba:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 3be:	ea cf       	rjmp	.-44     	; 0x394 <_Z14serialEventRunv+0x46>
 3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 3c4:	08 95       	ret

000003c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 3c6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 3c8:	84 8d       	ldd	r24, Z+28	; 0x1c
 3ca:	df 01       	movw	r26, r30
 3cc:	a8 0f       	add	r26, r24
 3ce:	b1 1d       	adc	r27, r1
 3d0:	a3 5a       	subi	r26, 0xA3	; 163
 3d2:	bf 4f       	sbci	r27, 0xFF	; 255
 3d4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 3d6:	84 8d       	ldd	r24, Z+28	; 0x1c
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	8f 73       	andi	r24, 0x3F	; 63
 3de:	99 27       	eor	r25, r25
 3e0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 3e2:	a6 89       	ldd	r26, Z+22	; 0x16
 3e4:	b7 89       	ldd	r27, Z+23	; 0x17
 3e6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 3e8:	a0 89       	ldd	r26, Z+16	; 0x10
 3ea:	b1 89       	ldd	r27, Z+17	; 0x11
 3ec:	8c 91       	ld	r24, X
 3ee:	80 64       	ori	r24, 0x40	; 64
 3f0:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 3f2:	93 8d       	ldd	r25, Z+27	; 0x1b
 3f4:	84 8d       	ldd	r24, Z+28	; 0x1c
 3f6:	98 13       	cpse	r25, r24
 3f8:	06 c0       	rjmp	.+12     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 3fa:	02 88       	ldd	r0, Z+18	; 0x12
 3fc:	f3 89       	ldd	r31, Z+19	; 0x13
 3fe:	e0 2d       	mov	r30, r0
 400:	80 81       	ld	r24, Z
 402:	8f 7d       	andi	r24, 0xDF	; 223
 404:	80 83       	st	Z, r24
 406:	08 95       	ret

00000408 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 408:	ef 92       	push	r14
 40a:	ff 92       	push	r15
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	ec 01       	movw	r28, r24
  _written = true;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 41a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 41c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 41e:	98 13       	cpse	r25, r24
 420:	05 c0       	rjmp	.+10     	; 0x42c <_ZN14HardwareSerial5writeEh+0x24>
 422:	e8 89       	ldd	r30, Y+16	; 0x10
 424:	f9 89       	ldd	r31, Y+17	; 0x11
 426:	80 81       	ld	r24, Z
 428:	85 fd       	sbrc	r24, 5
 42a:	23 c0       	rjmp	.+70     	; 0x472 <_ZN14HardwareSerial5writeEh+0x6a>
 42c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 42e:	0b 8d       	ldd	r16, Y+27	; 0x1b
 430:	10 e0       	ldi	r17, 0x00	; 0
 432:	0f 5f       	subi	r16, 0xFF	; 255
 434:	1f 4f       	sbci	r17, 0xFF	; 255
 436:	0f 73       	andi	r16, 0x3F	; 63
 438:	11 27       	eor	r17, r17
 43a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 43c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 43e:	e8 12       	cpse	r14, r24
 440:	0b c0       	rjmp	.+22     	; 0x458 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	07 fc       	sbrc	r0, 7
 446:	fa cf       	rjmp	.-12     	; 0x43c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 448:	e8 89       	ldd	r30, Y+16	; 0x10
 44a:	f9 89       	ldd	r31, Y+17	; 0x11
 44c:	80 81       	ld	r24, Z
 44e:	85 ff       	sbrs	r24, 5
 450:	f5 cf       	rjmp	.-22     	; 0x43c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 452:	ce 01       	movw	r24, r28
 454:	b8 df       	rcall	.-144    	; 0x3c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 456:	f2 cf       	rjmp	.-28     	; 0x43c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 458:	8b 8d       	ldd	r24, Y+27	; 0x1b
 45a:	fe 01       	movw	r30, r28
 45c:	e8 0f       	add	r30, r24
 45e:	f1 1d       	adc	r31, r1
 460:	e3 5a       	subi	r30, 0xA3	; 163
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 466:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 468:	ea 89       	ldd	r30, Y+18	; 0x12
 46a:	fb 89       	ldd	r31, Y+19	; 0x13
 46c:	80 81       	ld	r24, Z
 46e:	80 62       	ori	r24, 0x20	; 32
 470:	07 c0       	rjmp	.+14     	; 0x480 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 472:	ee 89       	ldd	r30, Y+22	; 0x16
 474:	ff 89       	ldd	r31, Y+23	; 0x17
 476:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 478:	e8 89       	ldd	r30, Y+16	; 0x10
 47a:	f9 89       	ldd	r31, Y+17	; 0x11
 47c:	80 81       	ld	r24, Z
 47e:	80 64       	ori	r24, 0x40	; 64
 480:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	08 95       	ret

00000494 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 49a:	88 8d       	ldd	r24, Y+24	; 0x18
 49c:	88 23       	and	r24, r24
 49e:	c1 f0       	breq	.+48     	; 0x4d0 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4a0:	ea 89       	ldd	r30, Y+18	; 0x12
 4a2:	fb 89       	ldd	r31, Y+19	; 0x13
 4a4:	80 81       	ld	r24, Z
 4a6:	85 fd       	sbrc	r24, 5
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <_ZN14HardwareSerial5flushEv+0x20>
 4aa:	a8 89       	ldd	r26, Y+16	; 0x10
 4ac:	b9 89       	ldd	r27, Y+17	; 0x11
 4ae:	8c 91       	ld	r24, X
 4b0:	86 fd       	sbrc	r24, 6
 4b2:	0e c0       	rjmp	.+28     	; 0x4d0 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	07 fc       	sbrc	r0, 7
 4b8:	f5 cf       	rjmp	.-22     	; 0x4a4 <_ZN14HardwareSerial5flushEv+0x10>
 4ba:	80 81       	ld	r24, Z
 4bc:	85 ff       	sbrs	r24, 5
 4be:	f2 cf       	rjmp	.-28     	; 0x4a4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4c0:	a8 89       	ldd	r26, Y+16	; 0x10
 4c2:	b9 89       	ldd	r27, Y+17	; 0x11
 4c4:	8c 91       	ld	r24, X
 4c6:	85 ff       	sbrs	r24, 5
 4c8:	ed cf       	rjmp	.-38     	; 0x4a4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4ca:	ce 01       	movw	r24, r28
 4cc:	7c df       	rcall	.-264    	; 0x3c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4ce:	e8 cf       	rjmp	.-48     	; 0x4a0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 4d6:	cf 92       	push	r12
 4d8:	df 92       	push	r13
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	ec 01       	movw	r28, r24
 4e6:	6a 01       	movw	r12, r20
 4e8:	7b 01       	movw	r14, r22
 4ea:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 4ec:	e8 89       	ldd	r30, Y+16	; 0x10
 4ee:	f9 89       	ldd	r31, Y+17	; 0x11
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4f4:	41 15       	cp	r20, r1
 4f6:	51 4e       	sbci	r21, 0xE1	; 225
 4f8:	61 05       	cpc	r22, r1
 4fa:	71 05       	cpc	r23, r1
 4fc:	a9 f0       	breq	.+42     	; 0x528 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	79 e0       	ldi	r23, 0x09	; 9
 502:	8d e3       	ldi	r24, 0x3D	; 61
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	a7 01       	movw	r20, r14
 508:	96 01       	movw	r18, r12
 50a:	dc d2       	rcall	.+1464   	; 0xac4 <__udivmodsi4>
 50c:	da 01       	movw	r26, r20
 50e:	c9 01       	movw	r24, r18
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	a1 09       	sbc	r26, r1
 514:	b1 09       	sbc	r27, r1
 516:	b6 95       	lsr	r27
 518:	a7 95       	ror	r26
 51a:	97 95       	ror	r25
 51c:	87 95       	ror	r24
 51e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 520:	21 15       	cp	r18, r1
 522:	80 e1       	ldi	r24, 0x10	; 16
 524:	38 07       	cpc	r19, r24
 526:	a0 f0       	brcs	.+40     	; 0x550 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 528:	e8 89       	ldd	r30, Y+16	; 0x10
 52a:	f9 89       	ldd	r31, Y+17	; 0x11
 52c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 52e:	60 e8       	ldi	r22, 0x80	; 128
 530:	74 e8       	ldi	r23, 0x84	; 132
 532:	8e e1       	ldi	r24, 0x1E	; 30
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	a7 01       	movw	r20, r14
 538:	96 01       	movw	r18, r12
 53a:	c4 d2       	rcall	.+1416   	; 0xac4 <__udivmodsi4>
 53c:	da 01       	movw	r26, r20
 53e:	c9 01       	movw	r24, r18
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	a1 09       	sbc	r26, r1
 544:	b1 09       	sbc	r27, r1
 546:	b6 95       	lsr	r27
 548:	a7 95       	ror	r26
 54a:	97 95       	ror	r25
 54c:	87 95       	ror	r24
 54e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 550:	ec 85       	ldd	r30, Y+12	; 0x0c
 552:	fd 85       	ldd	r31, Y+13	; 0x0d
 554:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 556:	ee 85       	ldd	r30, Y+14	; 0x0e
 558:	ff 85       	ldd	r31, Y+15	; 0x0f
 55a:	20 83       	st	Z, r18

  _written = false;
 55c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 55e:	ec 89       	ldd	r30, Y+20	; 0x14
 560:	fd 89       	ldd	r31, Y+21	; 0x15
 562:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 564:	ea 89       	ldd	r30, Y+18	; 0x12
 566:	fb 89       	ldd	r31, Y+19	; 0x13
 568:	80 81       	ld	r24, Z
 56a:	80 61       	ori	r24, 0x10	; 16
 56c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 56e:	ea 89       	ldd	r30, Y+18	; 0x12
 570:	fb 89       	ldd	r31, Y+19	; 0x13
 572:	80 81       	ld	r24, Z
 574:	88 60       	ori	r24, 0x08	; 8
 576:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 578:	ea 89       	ldd	r30, Y+18	; 0x12
 57a:	fb 89       	ldd	r31, Y+19	; 0x13
 57c:	80 81       	ld	r24, Z
 57e:	80 68       	ori	r24, 0x80	; 128
 580:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 582:	ea 89       	ldd	r30, Y+18	; 0x12
 584:	fb 89       	ldd	r31, Y+19	; 0x13
 586:	80 81       	ld	r24, Z
 588:	8f 7d       	andi	r24, 0xDF	; 223
 58a:	80 83       	st	Z, r24
}
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	df 90       	pop	r13
 598:	cf 90       	pop	r12
 59a:	08 95       	ret

0000059c <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	0b b6       	in	r0, 0x3b	; 59
 5a8:	0f 92       	push	r0
 5aa:	2f 93       	push	r18
 5ac:	8f 93       	push	r24
 5ae:	9f 93       	push	r25
 5b0:	ef 93       	push	r30
 5b2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 5b4:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__data_end+0x10>
 5b8:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <__data_end+0x11>
 5bc:	80 81       	ld	r24, Z
 5be:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <__data_end+0x16>
 5c2:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <__data_end+0x17>
 5c6:	82 fd       	sbrc	r24, 2
 5c8:	12 c0       	rjmp	.+36     	; 0x5ee <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5ca:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5cc:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <__data_end+0x19>
 5d0:	8f 5f       	subi	r24, 0xFF	; 255
 5d2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5d4:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <__data_end+0x1a>
 5d8:	82 17       	cp	r24, r18
 5da:	51 f0       	breq	.+20     	; 0x5f0 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 5dc:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <__data_end+0x19>
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	e0 5f       	subi	r30, 0xF0	; 240
 5e4:	fd 4f       	sbci	r31, 0xFD	; 253
 5e6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 5e8:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <__data_end+0x19>
 5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 5ee:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 5f0:	ff 91       	pop	r31
 5f2:	ef 91       	pop	r30
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	2f 91       	pop	r18
 5fa:	0f 90       	pop	r0
 5fc:	0b be       	out	0x3b, r0	; 59
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	0b b6       	in	r0, 0x3b	; 59
 614:	0f 92       	push	r0
 616:	2f 93       	push	r18
 618:	3f 93       	push	r19
 61a:	4f 93       	push	r20
 61c:	5f 93       	push	r21
 61e:	6f 93       	push	r22
 620:	7f 93       	push	r23
 622:	8f 93       	push	r24
 624:	9f 93       	push	r25
 626:	af 93       	push	r26
 628:	bf 93       	push	r27
 62a:	ef 93       	push	r30
 62c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 62e:	80 e1       	ldi	r24, 0x10	; 16
 630:	92 e0       	ldi	r25, 0x02	; 2
 632:	c9 de       	rcall	.-622    	; 0x3c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	bf 91       	pop	r27
 63a:	af 91       	pop	r26
 63c:	9f 91       	pop	r25
 63e:	8f 91       	pop	r24
 640:	7f 91       	pop	r23
 642:	6f 91       	pop	r22
 644:	5f 91       	pop	r21
 646:	4f 91       	pop	r20
 648:	3f 91       	pop	r19
 64a:	2f 91       	pop	r18
 64c:	0f 90       	pop	r0
 64e:	0b be       	out	0x3b, r0	; 59
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 65a:	80 e1       	ldi	r24, 0x10	; 16
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	49 de       	rcall	.-878    	; 0x2f2 <_ZN14HardwareSerial9availableEv>
 660:	21 e0       	ldi	r18, 0x01	; 1
 662:	89 2b       	or	r24, r25
 664:	09 f4       	brne	.+2      	; 0x668 <_Z17Serial0_availablev+0xe>
 666:	20 e0       	ldi	r18, 0x00	; 0
}
 668:	82 2f       	mov	r24, r18
 66a:	08 95       	ret

0000066c <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 66c:	e0 e1       	ldi	r30, 0x10	; 16
 66e:	f2 e0       	ldi	r31, 0x02	; 2
 670:	13 82       	std	Z+3, r1	; 0x03
 672:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 674:	88 ee       	ldi	r24, 0xE8	; 232
 676:	93 e0       	ldi	r25, 0x03	; 3
 678:	a0 e0       	ldi	r26, 0x00	; 0
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	84 83       	std	Z+4, r24	; 0x04
 67e:	95 83       	std	Z+5, r25	; 0x05
 680:	a6 83       	std	Z+6, r26	; 0x06
 682:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 684:	84 e0       	ldi	r24, 0x04	; 4
 686:	92 e0       	ldi	r25, 0x02	; 2
 688:	91 83       	std	Z+1, r25	; 0x01
 68a:	80 83       	st	Z, r24
 68c:	85 ec       	ldi	r24, 0xC5	; 197
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	95 87       	std	Z+13, r25	; 0x0d
 692:	84 87       	std	Z+12, r24	; 0x0c
 694:	84 ec       	ldi	r24, 0xC4	; 196
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	97 87       	std	Z+15, r25	; 0x0f
 69a:	86 87       	std	Z+14, r24	; 0x0e
 69c:	80 ec       	ldi	r24, 0xC0	; 192
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	91 8b       	std	Z+17, r25	; 0x11
 6a2:	80 8b       	std	Z+16, r24	; 0x10
 6a4:	81 ec       	ldi	r24, 0xC1	; 193
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	93 8b       	std	Z+19, r25	; 0x13
 6aa:	82 8b       	std	Z+18, r24	; 0x12
 6ac:	82 ec       	ldi	r24, 0xC2	; 194
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	95 8b       	std	Z+21, r25	; 0x15
 6b2:	84 8b       	std	Z+20, r24	; 0x14
 6b4:	86 ec       	ldi	r24, 0xC6	; 198
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	97 8b       	std	Z+23, r25	; 0x17
 6ba:	86 8b       	std	Z+22, r24	; 0x16
 6bc:	11 8e       	std	Z+25, r1	; 0x19
 6be:	12 8e       	std	Z+26, r1	; 0x1a
 6c0:	13 8e       	std	Z+27, r1	; 0x1b
 6c2:	14 8e       	std	Z+28, r1	; 0x1c
 6c4:	08 95       	ret

000006c6 <initVariant>:
 6c6:	08 95       	ret

000006c8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6c8:	db d0       	rcall	.+438    	; 0x880 <init>
 6ca:	fd df       	rcall	.-6      	; 0x6c6 <initVariant>
 6cc:	d0 dd       	rcall	.-1120   	; 0x26e <setup>
 6ce:	c7 ea       	ldi	r28, 0xA7	; 167
 6d0:	d1 e0       	ldi	r29, 0x01	; 1
 6d2:	ff dd       	rcall	.-1026   	; 0x2d2 <loop>
 6d4:	20 97       	sbiw	r28, 0x00	; 0
 6d6:	e9 f3       	breq	.-6      	; 0x6d2 <main+0xa>
 6d8:	3a de       	rcall	.-908    	; 0x34e <_Z14serialEventRunv>
 6da:	fb cf       	rjmp	.-10     	; 0x6d2 <main+0xa>

000006dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 6dc:	cf 92       	push	r12
 6de:	df 92       	push	r13
 6e0:	ef 92       	push	r14
 6e2:	ff 92       	push	r15
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	6c 01       	movw	r12, r24
 6ee:	7a 01       	movw	r14, r20
 6f0:	8b 01       	movw	r16, r22
  size_t n = 0;
 6f2:	c0 e0       	ldi	r28, 0x00	; 0
 6f4:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 6f6:	ce 15       	cp	r28, r14
 6f8:	df 05       	cpc	r29, r15
 6fa:	81 f0       	breq	.+32     	; 0x71c <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 6fc:	d8 01       	movw	r26, r16
 6fe:	6d 91       	ld	r22, X+
 700:	8d 01       	movw	r16, r26
 702:	d6 01       	movw	r26, r12
 704:	ed 91       	ld	r30, X+
 706:	fc 91       	ld	r31, X
 708:	01 90       	ld	r0, Z+
 70a:	f0 81       	ld	r31, Z
 70c:	e0 2d       	mov	r30, r0
 70e:	c6 01       	movw	r24, r12
 710:	19 95       	eicall
 712:	89 2b       	or	r24, r25
 714:	11 f0       	breq	.+4      	; 0x71a <_ZN5Print5writeEPKhj+0x3e>
 716:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 718:	ee cf       	rjmp	.-36     	; 0x6f6 <_ZN5Print5writeEPKhj+0x1a>
 71a:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
 71c:	c7 01       	movw	r24, r14
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	1f 91       	pop	r17
 724:	0f 91       	pop	r16
 726:	ff 90       	pop	r15
 728:	ef 90       	pop	r14
 72a:	df 90       	pop	r13
 72c:	cf 90       	pop	r12
 72e:	08 95       	ret

00000730 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 730:	1f 92       	push	r1
 732:	0f 92       	push	r0
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	0f 92       	push	r0
 738:	11 24       	eor	r1, r1
 73a:	2f 93       	push	r18
 73c:	3f 93       	push	r19
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
 742:	af 93       	push	r26
 744:	bf 93       	push	r27
 746:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <timer0_millis>
 74a:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <timer0_millis+0x1>
 74e:	a0 91 b0 02 	lds	r26, 0x02B0	; 0x8002b0 <timer0_millis+0x2>
 752:	b0 91 b1 02 	lds	r27, 0x02B1	; 0x8002b1 <timer0_millis+0x3>
 756:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <timer0_fract>
 75a:	23 e0       	ldi	r18, 0x03	; 3
 75c:	23 0f       	add	r18, r19
 75e:	2d 37       	cpi	r18, 0x7D	; 125
 760:	20 f4       	brcc	.+8      	; 0x76a <__vector_23+0x3a>
 762:	01 96       	adiw	r24, 0x01	; 1
 764:	a1 1d       	adc	r26, r1
 766:	b1 1d       	adc	r27, r1
 768:	05 c0       	rjmp	.+10     	; 0x774 <__vector_23+0x44>
 76a:	26 e8       	ldi	r18, 0x86	; 134
 76c:	23 0f       	add	r18, r19
 76e:	02 96       	adiw	r24, 0x02	; 2
 770:	a1 1d       	adc	r26, r1
 772:	b1 1d       	adc	r27, r1
 774:	20 93 ad 02 	sts	0x02AD, r18	; 0x8002ad <timer0_fract>
 778:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <timer0_millis>
 77c:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <timer0_millis+0x1>
 780:	a0 93 b0 02 	sts	0x02B0, r26	; 0x8002b0 <timer0_millis+0x2>
 784:	b0 93 b1 02 	sts	0x02B1, r27	; 0x8002b1 <timer0_millis+0x3>
 788:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <timer0_overflow_count>
 78c:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <timer0_overflow_count+0x1>
 790:	a0 91 b4 02 	lds	r26, 0x02B4	; 0x8002b4 <timer0_overflow_count+0x2>
 794:	b0 91 b5 02 	lds	r27, 0x02B5	; 0x8002b5 <timer0_overflow_count+0x3>
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	a1 1d       	adc	r26, r1
 79c:	b1 1d       	adc	r27, r1
 79e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <timer0_overflow_count>
 7a2:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <timer0_overflow_count+0x1>
 7a6:	a0 93 b4 02 	sts	0x02B4, r26	; 0x8002b4 <timer0_overflow_count+0x2>
 7aa:	b0 93 b5 02 	sts	0x02B5, r27	; 0x8002b5 <timer0_overflow_count+0x3>
 7ae:	bf 91       	pop	r27
 7b0:	af 91       	pop	r26
 7b2:	9f 91       	pop	r25
 7b4:	8f 91       	pop	r24
 7b6:	3f 91       	pop	r19
 7b8:	2f 91       	pop	r18
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <micros>:
 7c4:	3f b7       	in	r19, 0x3f	; 63
 7c6:	f8 94       	cli
 7c8:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <timer0_overflow_count>
 7cc:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <timer0_overflow_count+0x1>
 7d0:	a0 91 b4 02 	lds	r26, 0x02B4	; 0x8002b4 <timer0_overflow_count+0x2>
 7d4:	b0 91 b5 02 	lds	r27, 0x02B5	; 0x8002b5 <timer0_overflow_count+0x3>
 7d8:	26 b5       	in	r18, 0x26	; 38
 7da:	a8 9b       	sbis	0x15, 0	; 21
 7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <micros+0x24>
 7de:	2f 3f       	cpi	r18, 0xFF	; 255
 7e0:	19 f0       	breq	.+6      	; 0x7e8 <micros+0x24>
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	a1 1d       	adc	r26, r1
 7e6:	b1 1d       	adc	r27, r1
 7e8:	3f bf       	out	0x3f, r19	; 63
 7ea:	ba 2f       	mov	r27, r26
 7ec:	a9 2f       	mov	r26, r25
 7ee:	98 2f       	mov	r25, r24
 7f0:	88 27       	eor	r24, r24
 7f2:	82 0f       	add	r24, r18
 7f4:	91 1d       	adc	r25, r1
 7f6:	a1 1d       	adc	r26, r1
 7f8:	b1 1d       	adc	r27, r1
 7fa:	bc 01       	movw	r22, r24
 7fc:	cd 01       	movw	r24, r26
 7fe:	42 e0       	ldi	r20, 0x02	; 2
 800:	66 0f       	add	r22, r22
 802:	77 1f       	adc	r23, r23
 804:	88 1f       	adc	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	4a 95       	dec	r20
 80a:	d1 f7       	brne	.-12     	; 0x800 <micros+0x3c>
 80c:	08 95       	ret

0000080e <delay>:
 80e:	8f 92       	push	r8
 810:	9f 92       	push	r9
 812:	af 92       	push	r10
 814:	bf 92       	push	r11
 816:	cf 92       	push	r12
 818:	df 92       	push	r13
 81a:	ef 92       	push	r14
 81c:	ff 92       	push	r15
 81e:	6b 01       	movw	r12, r22
 820:	7c 01       	movw	r14, r24
 822:	d0 df       	rcall	.-96     	; 0x7c4 <micros>
 824:	4b 01       	movw	r8, r22
 826:	5c 01       	movw	r10, r24
 828:	c1 14       	cp	r12, r1
 82a:	d1 04       	cpc	r13, r1
 82c:	e1 04       	cpc	r14, r1
 82e:	f1 04       	cpc	r15, r1
 830:	f1 f0       	breq	.+60     	; 0x86e <delay+0x60>
 832:	47 d1       	rcall	.+654    	; 0xac2 <yield>
 834:	c7 df       	rcall	.-114    	; 0x7c4 <micros>
 836:	dc 01       	movw	r26, r24
 838:	cb 01       	movw	r24, r22
 83a:	88 19       	sub	r24, r8
 83c:	99 09       	sbc	r25, r9
 83e:	aa 09       	sbc	r26, r10
 840:	bb 09       	sbc	r27, r11
 842:	88 3e       	cpi	r24, 0xE8	; 232
 844:	93 40       	sbci	r25, 0x03	; 3
 846:	a1 05       	cpc	r26, r1
 848:	b1 05       	cpc	r27, r1
 84a:	70 f3       	brcs	.-36     	; 0x828 <delay+0x1a>
 84c:	21 e0       	ldi	r18, 0x01	; 1
 84e:	c2 1a       	sub	r12, r18
 850:	d1 08       	sbc	r13, r1
 852:	e1 08       	sbc	r14, r1
 854:	f1 08       	sbc	r15, r1
 856:	88 ee       	ldi	r24, 0xE8	; 232
 858:	88 0e       	add	r8, r24
 85a:	83 e0       	ldi	r24, 0x03	; 3
 85c:	98 1e       	adc	r9, r24
 85e:	a1 1c       	adc	r10, r1
 860:	b1 1c       	adc	r11, r1
 862:	c1 14       	cp	r12, r1
 864:	d1 04       	cpc	r13, r1
 866:	e1 04       	cpc	r14, r1
 868:	f1 04       	cpc	r15, r1
 86a:	21 f7       	brne	.-56     	; 0x834 <delay+0x26>
 86c:	dd cf       	rjmp	.-70     	; 0x828 <delay+0x1a>
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	df 90       	pop	r13
 874:	cf 90       	pop	r12
 876:	bf 90       	pop	r11
 878:	af 90       	pop	r10
 87a:	9f 90       	pop	r9
 87c:	8f 90       	pop	r8
 87e:	08 95       	ret

00000880 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 880:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 882:	84 b5       	in	r24, 0x24	; 36
 884:	82 60       	ori	r24, 0x02	; 2
 886:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 888:	84 b5       	in	r24, 0x24	; 36
 88a:	81 60       	ori	r24, 0x01	; 1
 88c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 88e:	85 b5       	in	r24, 0x25	; 37
 890:	82 60       	ori	r24, 0x02	; 2
 892:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 894:	85 b5       	in	r24, 0x25	; 37
 896:	81 60       	ori	r24, 0x01	; 1
 898:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 89a:	ee e6       	ldi	r30, 0x6E	; 110
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	81 60       	ori	r24, 0x01	; 1
 8a2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 8a4:	e1 e8       	ldi	r30, 0x81	; 129
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8aa:	80 81       	ld	r24, Z
 8ac:	82 60       	ori	r24, 0x02	; 2
 8ae:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 8b0:	80 81       	ld	r24, Z
 8b2:	81 60       	ori	r24, 0x01	; 1
 8b4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 8b6:	e0 e8       	ldi	r30, 0x80	; 128
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	81 60       	ori	r24, 0x01	; 1
 8be:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 8c0:	e1 eb       	ldi	r30, 0xB1	; 177
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	80 81       	ld	r24, Z
 8c6:	84 60       	ori	r24, 0x04	; 4
 8c8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 8ca:	e0 eb       	ldi	r30, 0xB0	; 176
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 8d0:	81 60       	ori	r24, 0x01	; 1
 8d2:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 8d4:	e1 e9       	ldi	r30, 0x91	; 145
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	82 60       	ori	r24, 0x02	; 2
 8dc:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 8de:	80 81       	ld	r24, Z
 8e0:	81 60       	ori	r24, 0x01	; 1
 8e2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 8e4:	e0 e9       	ldi	r30, 0x90	; 144
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	81 60       	ori	r24, 0x01	; 1
 8ec:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 8ee:	e1 ea       	ldi	r30, 0xA1	; 161
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 81       	ld	r24, Z
 8f4:	82 60       	ori	r24, 0x02	; 2
 8f6:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 8f8:	80 81       	ld	r24, Z
 8fa:	81 60       	ori	r24, 0x01	; 1
 8fc:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 8fe:	e0 ea       	ldi	r30, 0xA0	; 160
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	80 81       	ld	r24, Z
 904:	81 60       	ori	r24, 0x01	; 1
 906:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 908:	e1 e2       	ldi	r30, 0x21	; 33
 90a:	f1 e0       	ldi	r31, 0x01	; 1
 90c:	80 81       	ld	r24, Z
 90e:	82 60       	ori	r24, 0x02	; 2
 910:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 912:	80 81       	ld	r24, Z
 914:	81 60       	ori	r24, 0x01	; 1
 916:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 918:	e0 e2       	ldi	r30, 0x20	; 32
 91a:	f1 e0       	ldi	r31, 0x01	; 1
 91c:	80 81       	ld	r24, Z
 91e:	81 60       	ori	r24, 0x01	; 1
 920:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 922:	ea e7       	ldi	r30, 0x7A	; 122
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	80 81       	ld	r24, Z
 928:	84 60       	ori	r24, 0x04	; 4
 92a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 92c:	80 81       	ld	r24, Z
 92e:	82 60       	ori	r24, 0x02	; 2
 930:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 932:	80 81       	ld	r24, Z
 934:	81 60       	ori	r24, 0x01	; 1
 936:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 938:	80 81       	ld	r24, Z
 93a:	80 68       	ori	r24, 0x80	; 128
 93c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 93e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 942:	08 95       	ret

00000944 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	fc 01       	movw	r30, r24
 948:	31 97       	sbiw	r30, 0x01	; 1
 94a:	e2 31       	cpi	r30, 0x12	; 18
 94c:	f1 05       	cpc	r31, r1
 94e:	08 f0       	brcs	.+2      	; 0x952 <turnOffPWM+0xe>
 950:	4d c0       	rjmp	.+154    	; 0x9ec <turnOffPWM+0xa8>
 952:	88 27       	eor	r24, r24
 954:	ee 58       	subi	r30, 0x8E	; 142
 956:	ff 4f       	sbci	r31, 0xFF	; 255
 958:	8f 4f       	sbci	r24, 0xFF	; 255
 95a:	d6 c0       	rjmp	.+428    	; 0xb08 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 95c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 960:	8f 77       	andi	r24, 0x7F	; 127
 962:	03 c0       	rjmp	.+6      	; 0x96a <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 964:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 968:	8f 7d       	andi	r24, 0xDF	; 223
 96a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 96e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 970:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 974:	87 7f       	andi	r24, 0xF7	; 247
 976:	f9 cf       	rjmp	.-14     	; 0x96a <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 978:	84 b5       	in	r24, 0x24	; 36
 97a:	8f 77       	andi	r24, 0x7F	; 127
 97c:	02 c0       	rjmp	.+4      	; 0x982 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 97e:	84 b5       	in	r24, 0x24	; 36
 980:	8f 7d       	andi	r24, 0xDF	; 223
 982:	84 bd       	out	0x24, r24	; 36
 984:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 986:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 98a:	8f 77       	andi	r24, 0x7F	; 127
 98c:	03 c0       	rjmp	.+6      	; 0x994 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 98e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 992:	8f 7d       	andi	r24, 0xDF	; 223
 994:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 998:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 99a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 99e:	8f 77       	andi	r24, 0x7F	; 127
 9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 9a2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 9a6:	8f 7d       	andi	r24, 0xDF	; 223
 9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 9aa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 9ae:	87 7f       	andi	r24, 0xF7	; 247
 9b0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 9b4:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 9b6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 9ba:	8f 77       	andi	r24, 0x7F	; 127
 9bc:	07 c0       	rjmp	.+14     	; 0x9cc <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 9be:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 9c2:	8f 7d       	andi	r24, 0xDF	; 223
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 9c6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 9ca:	87 7f       	andi	r24, 0xF7	; 247
 9cc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 9d0:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 9d2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 9d6:	8f 77       	andi	r24, 0x7F	; 127
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 9da:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 9de:	8f 7d       	andi	r24, 0xDF	; 223
 9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 9e2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 9e6:	87 7f       	andi	r24, 0xF7	; 247
 9e8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 9ec:	08 95       	ret

000009ee <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	fc 01       	movw	r30, r24
 9f6:	e2 5b       	subi	r30, 0xB2	; 178
 9f8:	fe 4f       	sbci	r31, 0xFE	; 254
 9fa:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 9fc:	fc 01       	movw	r30, r24
 9fe:	ec 56       	subi	r30, 0x6C	; 108
 a00:	fe 4f       	sbci	r31, 0xFE	; 254
 a02:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a04:	88 23       	and	r24, r24
 a06:	61 f1       	breq	.+88     	; 0xa60 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	88 0f       	add	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	fc 01       	movw	r30, r24
 a10:	ec 50       	subi	r30, 0x0C	; 12
 a12:	fe 4f       	sbci	r31, 0xFE	; 254
 a14:	c5 91       	lpm	r28, Z+
 a16:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 a18:	fc 01       	movw	r30, r24
 a1a:	e6 52       	subi	r30, 0x26	; 38
 a1c:	fe 4f       	sbci	r31, 0xFE	; 254
 a1e:	a5 91       	lpm	r26, Z+
 a20:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 a22:	61 11       	cpse	r22, r1
 a24:	09 c0       	rjmp	.+18     	; 0xa38 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 a26:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a28:	f8 94       	cli
		*reg &= ~bit;
 a2a:	88 81       	ld	r24, Y
 a2c:	20 95       	com	r18
 a2e:	82 23       	and	r24, r18
 a30:	88 83       	st	Y, r24
		*out &= ~bit;
 a32:	ec 91       	ld	r30, X
 a34:	2e 23       	and	r18, r30
 a36:	0b c0       	rjmp	.+22     	; 0xa4e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 a38:	62 30       	cpi	r22, 0x02	; 2
 a3a:	61 f4       	brne	.+24     	; 0xa54 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 a3c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a3e:	f8 94       	cli
		*reg &= ~bit;
 a40:	88 81       	ld	r24, Y
 a42:	32 2f       	mov	r19, r18
 a44:	30 95       	com	r19
 a46:	83 23       	and	r24, r19
 a48:	88 83       	st	Y, r24
		*out |= bit;
 a4a:	ec 91       	ld	r30, X
 a4c:	2e 2b       	or	r18, r30
 a4e:	2c 93       	st	X, r18
		SREG = oldSREG;
 a50:	9f bf       	out	0x3f, r25	; 63
 a52:	06 c0       	rjmp	.+12     	; 0xa60 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 a54:	8f b7       	in	r24, 0x3f	; 63
                cli();
 a56:	f8 94       	cli
		*reg |= bit;
 a58:	e8 81       	ld	r30, Y
 a5a:	2e 2b       	or	r18, r30
 a5c:	28 83       	st	Y, r18
		SREG = oldSREG;
 a5e:	8f bf       	out	0x3f, r24	; 63
	}
}
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	08 95       	ret

00000a66 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a66:	1f 93       	push	r17
 a68:	cf 93       	push	r28
 a6a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a6c:	28 2f       	mov	r18, r24
 a6e:	30 e0       	ldi	r19, 0x00	; 0
 a70:	f9 01       	movw	r30, r18
 a72:	e8 5f       	subi	r30, 0xF8	; 248
 a74:	fe 4f       	sbci	r31, 0xFE	; 254
 a76:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a78:	f9 01       	movw	r30, r18
 a7a:	e2 5b       	subi	r30, 0xB2	; 178
 a7c:	fe 4f       	sbci	r31, 0xFE	; 254
 a7e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a80:	f9 01       	movw	r30, r18
 a82:	ec 56       	subi	r30, 0x6C	; 108
 a84:	fe 4f       	sbci	r31, 0xFE	; 254
 a86:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a88:	cc 23       	and	r28, r28
 a8a:	b9 f0       	breq	.+46     	; 0xaba <digitalWrite+0x54>
 a8c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a8e:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
 a90:	59 df       	rcall	.-334    	; 0x944 <turnOffPWM>
 a92:	ec 2f       	mov	r30, r28
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	ee 0f       	add	r30, r30
 a98:	ff 1f       	adc	r31, r31
 a9a:	e6 52       	subi	r30, 0x26	; 38
 a9c:	fe 4f       	sbci	r31, 0xFE	; 254
 a9e:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
 aa0:	b4 91       	lpm	r27, Z
	cli();
 aa2:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
 aa4:	f8 94       	cli
 aa6:	11 11       	cpse	r17, r1
		*out &= ~bit;
 aa8:	04 c0       	rjmp	.+8      	; 0xab2 <digitalWrite+0x4c>
 aaa:	8c 91       	ld	r24, X
 aac:	d0 95       	com	r29
 aae:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <digitalWrite+0x50>
 ab2:	ec 91       	ld	r30, X
 ab4:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
 ab6:	dc 93       	st	X, r29
}
 ab8:	9f bf       	out	0x3f, r25	; 63
 aba:	df 91       	pop	r29
 abc:	cf 91       	pop	r28
 abe:	1f 91       	pop	r17
 ac0:	08 95       	ret

00000ac2 <yield>:
 ac2:	08 95       	ret

00000ac4 <__udivmodsi4>:
 ac4:	a1 e2       	ldi	r26, 0x21	; 33
 ac6:	1a 2e       	mov	r1, r26
 ac8:	aa 1b       	sub	r26, r26
 aca:	bb 1b       	sub	r27, r27
 acc:	fd 01       	movw	r30, r26
 ace:	0d c0       	rjmp	.+26     	; 0xaea <__udivmodsi4_ep>

00000ad0 <__udivmodsi4_loop>:
 ad0:	aa 1f       	adc	r26, r26
 ad2:	bb 1f       	adc	r27, r27
 ad4:	ee 1f       	adc	r30, r30
 ad6:	ff 1f       	adc	r31, r31
 ad8:	a2 17       	cp	r26, r18
 ada:	b3 07       	cpc	r27, r19
 adc:	e4 07       	cpc	r30, r20
 ade:	f5 07       	cpc	r31, r21
 ae0:	20 f0       	brcs	.+8      	; 0xaea <__udivmodsi4_ep>
 ae2:	a2 1b       	sub	r26, r18
 ae4:	b3 0b       	sbc	r27, r19
 ae6:	e4 0b       	sbc	r30, r20
 ae8:	f5 0b       	sbc	r31, r21

00000aea <__udivmodsi4_ep>:
 aea:	66 1f       	adc	r22, r22
 aec:	77 1f       	adc	r23, r23
 aee:	88 1f       	adc	r24, r24
 af0:	99 1f       	adc	r25, r25
 af2:	1a 94       	dec	r1
 af4:	69 f7       	brne	.-38     	; 0xad0 <__udivmodsi4_loop>
 af6:	60 95       	com	r22
 af8:	70 95       	com	r23
 afa:	80 95       	com	r24
 afc:	90 95       	com	r25
 afe:	9b 01       	movw	r18, r22
 b00:	ac 01       	movw	r20, r24
 b02:	bd 01       	movw	r22, r26
 b04:	cf 01       	movw	r24, r30
 b06:	08 95       	ret

00000b08 <__tablejump2__>:
 b08:	ee 0f       	add	r30, r30
 b0a:	ff 1f       	adc	r31, r31
 b0c:	88 1f       	adc	r24, r24
 b0e:	8b bf       	out	0x3b, r24	; 59
 b10:	07 90       	elpm	r0, Z+
 b12:	f6 91       	elpm	r31, Z
 b14:	e0 2d       	mov	r30, r0
 b16:	19 94       	eijmp

00000b18 <_exit>:
 b18:	f8 94       	cli

00000b1a <__stop_program>:
 b1a:	ff cf       	rjmp	.-2      	; 0xb1a <__stop_program>
