// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/18/2017 10:45:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    code_lock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module code_lock_vlg_sample_tst(
	clk,
	code,
	enter,
	reset,
	sampler_tx
);
input  clk;
input [3:0] code;
input  enter;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or code or enter or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module code_lock_vlg_check_tst (
	lock,
	status,
	sampler_rx
);
input  lock;
input [5:0] status;
input sampler_rx;

reg  lock_expected;
reg [5:0] status_expected;

reg  lock_prev;
reg [5:0] status_prev;

reg  lock_expected_prev;
reg [5:0] status_expected_prev;

reg  last_lock_exp;
reg [5:0] last_status_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	lock_prev = lock;
	status_prev = status;
end

// update expected /o prevs

always @(trigger)
begin
	lock_expected_prev = lock_expected;
	status_expected_prev = status_expected;
end



// expected lock
initial
begin
	lock_expected = 1'bX;
end 
// expected status[ 5 ]
initial
begin
	status_expected[5] = 1'bX;
end 
// expected status[ 4 ]
initial
begin
	status_expected[4] = 1'bX;
end 
// expected status[ 3 ]
initial
begin
	status_expected[3] = 1'bX;
end 
// expected status[ 2 ]
initial
begin
	status_expected[2] = 1'bX;
end 
// expected status[ 1 ]
initial
begin
	status_expected[1] = 1'bX;
end 
// expected status[ 0 ]
initial
begin
	status_expected[0] = 1'bX;
end 
// generate trigger
always @(lock_expected or lock or status_expected or status)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected lock = %b | expected status = %b | ",lock_expected_prev,status_expected_prev);
	$display("| real lock = %b | real status = %b | ",lock_prev,status_prev);
`endif
	if (
		( lock_expected_prev !== 1'bx ) && ( lock_prev !== lock_expected_prev )
		&& ((lock_expected_prev !== last_lock_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lock :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lock_expected_prev);
		$display ("     Real value = %b", lock_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lock_exp = lock_expected_prev;
	end
	if (
		( status_expected_prev[0] !== 1'bx ) && ( status_prev[0] !== status_expected_prev[0] )
		&& ((status_expected_prev[0] !== last_status_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_status_exp[0] = status_expected_prev[0];
	end
	if (
		( status_expected_prev[1] !== 1'bx ) && ( status_prev[1] !== status_expected_prev[1] )
		&& ((status_expected_prev[1] !== last_status_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_status_exp[1] = status_expected_prev[1];
	end
	if (
		( status_expected_prev[2] !== 1'bx ) && ( status_prev[2] !== status_expected_prev[2] )
		&& ((status_expected_prev[2] !== last_status_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_status_exp[2] = status_expected_prev[2];
	end
	if (
		( status_expected_prev[3] !== 1'bx ) && ( status_prev[3] !== status_expected_prev[3] )
		&& ((status_expected_prev[3] !== last_status_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_status_exp[3] = status_expected_prev[3];
	end
	if (
		( status_expected_prev[4] !== 1'bx ) && ( status_prev[4] !== status_expected_prev[4] )
		&& ((status_expected_prev[4] !== last_status_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_status_exp[4] = status_expected_prev[4];
	end
	if (
		( status_expected_prev[5] !== 1'bx ) && ( status_prev[5] !== status_expected_prev[5] )
		&& ((status_expected_prev[5] !== last_status_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_status_exp[5] = status_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module code_lock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] code;
reg enter;
reg reset;
// wires                                               
wire lock;
wire [5:0] status;

wire sampler;                             

// assign statements (if any)                          
code_lock i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.code(code),
	.enter(enter),
	.lock(lock),
	.reset(reset),
	.status(status)
);

// clk
initial
begin
	clk = 1'b0;
end 
// code[ 3 ]
initial
begin
	code[3] = 1'b0;
	code[3] = #360000 1'b1;
	code[3] = #220000 1'b0;
end 
// code[ 2 ]
initial
begin
	code[2] = 1'b0;
	code[2] = #360000 1'b1;
	code[2] = #220000 1'b0;
end 
// code[ 1 ]
initial
begin
	code[1] = 1'b0;
	code[1] = #360000 1'b1;
	code[1] = #220000 1'b0;
end 
// code[ 0 ]
initial
begin
	code[0] = 1'b0;
	code[0] = #360000 1'b1;
	code[0] = #220000 1'b0;
end 

// enter
initial
begin
	enter = 1'b0;
	enter = #100000 1'b1;
	enter = #260000 1'b0;
	enter = #200000 1'b1;
	enter = #120000 1'b0;
	enter = #180000 1'b1;
	enter = #60000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

code_lock_vlg_sample_tst tb_sample (
	.clk(clk),
	.code(code),
	.enter(enter),
	.reset(reset),
	.sampler_tx(sampler)
);

code_lock_vlg_check_tst tb_out(
	.lock(lock),
	.status(status),
	.sampler_rx(sampler)
);
endmodule

